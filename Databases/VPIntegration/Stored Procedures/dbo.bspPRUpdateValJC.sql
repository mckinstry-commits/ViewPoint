SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE procedure [dbo].[bspPRUpdateValJC]
/***********************************************************
* Created: GG 06/01/98
* Modified: kb 3/25/99
*			GG 08/18/99 - Added EM Revenue validation - updates bPRJC, bPRER, and bPRRB
*           GG 08/27/99 - If liability amount is 0.00, skip burden phase and cost type validation
*           GG 09/10/99 - Fixed Phase update to bPRER
*           GG 09/14/99 - Fixed GL Revenue Account validation
*           GG 10/11/99 - Check for null Equip expense GL Account, fix equip expense amount update
*                             to bPRJC.
*           GG 11/08/99 - Validate Liability Template
*           GG 05/18/00 - Added option to interface Shift to JCCD
*           GG 09/25/00 - Changed burden update to follow labor breakout by factor, earn type, and shift
*                             when not interfacing burden by liability type
*           GG 01/30/01 - Changed Addon earnings to use factor of posted earnings code - #11898
*           GG 02/26/01 - Added variable to eliminate rounding problem with straight time portion of earnings
*		    GG 05/29/01 - Pull current JC Dept and update bPRTH (#13497)
*           GG 06/01/01 - Skip Phase/CT validation for earnings if hours and amount are 0.00 (#13500)
*			GG 09/05/01 - Add bPRER entry even if equip revenue is 0.00 - #14425
*			GG 03/09/02 - #14175 Phase Overrides for default GL account
*			EN 3/11/02 - issue 14181 Use Equip Phase override if one was entered
*			SR 07/09/02 - issue 17738 pass phasegroups to bspJCVPHASE & bspJCVCOSTTYPE
*			EN 10/9/02 - issue 18877 change double quotes to single
*			GG 01/31/03 - #19757 fix to get Job info when JC Co# or Job changes
*			MV 05/08/03 - #21201 - select Job Timecards where bPRTH.Type = 'J', because some 
*									Mechanic's Timecards may have a phase from PRAutoEarn. 
*			DANF 10/30/03 - 22786 Added Phase GL Account valid part over ride.
*			EN 12/09/03 - issue 23061  added isnull check, with (nolock), and dbo
*			EN 2/6/04 - issue 22936  check for existence of fiscal year in GL
*			EN 6/21/04 - issue 24712  set WorkUM equal to JCUM for time-based equipment usage
*			EN 6/21/04 - issue 24795 write JCUM to PRJC so that it gets written to JCCD_UM and JCCD_PostedUM
*  			JE 11/15/04 - issue 26213 add flags to not re-read information
*			GG 11/18/04 - #25812 - don't reset @jcfields with add-on burden
*			EN 3/23/05 - #17292  optionally include Factor and Shift with burden
*			EN 8/8/05 - #29473 corrected # of spaces allowed from EMGroup in @jcfields -- changed from char(2) to char(3)
*  			JE 12/28/05 - issue #119731 wrong goto & check for null GLAcct
*			GG 01/30/06 - #119805 - fix phase/cost type validation for premium time
*			GG 11/14/06 - #123034 - JC fixed rate template
*			GG 10/16/07 - #125791 - fix for DDDTShared
*			GF 12/17/2007 - issue #25569 separate post closed job flags in JCCO enhancement
*			EN 3/24/2010 #138770 fix blank user warning generated when validation error is generated by bspPRERInsert
*			EN 3/26/2010 #136430 validate bPRJC entries to back out amounts
*			EN 3/29/2010 #138690 if rate not setup in JC fixed rate template, use employee's JC fixed rate
*			MV 02/07/11 - #142061 - fix to #136430 validate bPRJC entries to back out amounts - include only timecards brought back
*							in and changed afater initial ledger update. (it was catching "L" entries from equipment only timecards
*							which caused a validation error)
*
*
* Called from main bspPRUpdateVal procedure to validate and load
* labor, burden and equipment costs into bPRJC, and equipment revenue
* distributions to bPRER and bPRRB prior to a Pay Period update.
*
* Errors are written to bPRUR unless fatal.
*
* Inputs:
*   @prco   		PR Company
*   @prgroup  		PR Group to validate
*   @prenddate		Pay Period Ending Date
*   @beginmth		Pay Period Beginning Month
*   @endmth		Pay Period Ending Month
*   @cutoffdate	Pay Period Cutoff Date
*
* Output:
*   @errmsg      error message if error occurs
*
* Return Value:
*   0         success
*   1         failure
*****************************************************/
(@prco bCompany = null, @prgroup bGroup = null, @prenddate bDate = null, @beginmth bMonth = null,
 @endmth bMonth = null, @cutoffdate bDate = null, @errmsg varchar(255) = null output)

as

set nocount on

declare @rcode int, @errortext varchar(255), @saveamt bDollar,  @openEmplSeq tinyint,
 	@openJCTime tinyint, @openAddon tinyint, @openLiabType tinyint, @validphasechars int, @pphase bPhase,
	@openPRJC tinyint --#136430
 
 -- PRCO variables
 declare @jcicraftclass bYN, @jcicrew bYN, @jciemployee bYN, @jcifactor bYN, @jciearntype bYN, @jcishift bYN,
 	@jcipostingdate bYN, @jciliabtype bYN, @jciequip bYN, @jcirevcode bYN, @emiemployee bYN,
 	@emiphase bYN, @emipostingdate bYN
 
 declare @employee bEmployee, @payseq tinyint, @jcrate bUnitCost, @postseq smallint, @postdate bDate, @jcco bCompany,
     @job bJob, @phasegroup bGroup, @phase bPhase, @jcdept bDept, @glco bCompany, @emco bCompany, @equip bEquip,
     @emgroup bGroup, @revcode bRevCode, @emctype bEMCType, @usageunits bUnits, @crew varchar(10), @craft bCraft, @class bClass,
     @earncode bEDLCode, @hours bHrs, @amt bDollar, @factor bRate, @jcctype bJCCType, @earntype bEarnType, @shift tinyint,
	@empjcrate bUnitCost, @ratetemplate smallint, @effectivedate bDate, @oldjcrate bUnitCost, @newjcrate bUnitCost
 	
declare @lastjcco bCompany, @lastjob bJob, @postclosedjobs bYN, @premphase bPhase, @premcosttype bJCCType,
		@mth bMonth, @jobstatus tinyint, @liabtemplate smallint, @msg varchar(30), @trackhrs bYN, @ctype bJCCType,
		@jchrs bHrs, @jcamt bDollar, @jcfields varchar(70), @liabtype bLiabilityType, @overphase bPhase, @jcphase bPhase,
		@overcosttype bJCCType, @calcmethod char(1), @liabrate bRate, @liabphase bPhase, @liabcosttype bJCCType, @vct varchar(5),
		@equipphase bPhase, @TimeCardType char(1), @overphasegrp bGroup, @postsoftclosedjobs bYN
 
 declare @jcfactor bRate, @jcearntype bEarnType, @jcshift tinyint, @type char(1), @jcliabtype bLiabilityType
 
 declare @emdept bDept, @category varchar(10), @status char(1), @revbasis char(1), @emrate bDollar, @workum bUM,
     @timeum bUM, @hrsconv bHrs, @emglco bCompany, @revenue bDollar, @jcum bUM, @jcglacct bGLAcct, @timeunits bUnits,
     @emfields varchar(54), @revglacct bGLAcct, @workunits bUnits, @jcunits bUnits,
 	@InputMask varchar(30), @InputType tinyint
 
 -- issue  26213 add flags to not re-read information
 declare  
 @flg1jcco bCompany, @flg1job bJob , @flg1jcphase bPhase, @flg1phasegroup bGroup, @flg1jcdept bDept,
 @flg2jcco bCompany, @flg2job bJob , @flg2jcphase bPhase, @flg2phasegroup bGroup, @flg2jcctype bJCCType, @v2um bUM,
 @flg3jcco bCompany, @flg3job bJob , @flg3jcphase bPhase, @flg3phasegroup bGroup, @flg3jcdept bDept, 
 @flg4jcco bCompany, @flg4job bJob , @flg4jcphase bPhase, @flg4phasegroup bGroup, @flg4ctype bJCCType,
 @flg5jcco bCompany, @flg5job bJob , @flg5jcphase bPhase, @flg5phasegroup bGroup, @flg5jcdept bDept,
 @flg6jcco bCompany, @flg6job bJob , @flg6jcphase bPhase, @flg6phasegroup bGroup, @flg6ctype bJCCType,
 @flg7jcco bCompany, @flg7job bJob , @flg7jcphase bPhase, @flg7phasegroup bGroup, @flg7ctype bJCCType,
 @flg8jcco bCompany, @flg8job bJob , @flg8jcphase bPhase, @flg8phasegroup bGroup,
 @flg9jcco bCompany, @flg9job bJob , @flg9jcphase bPhase, @flg9phasegroup bGroup, @flg9ctype bJCCType,
 @flgAjcco bCompany, @flgAjob bJob , @flgAjcphase bPhase, @flgAphasegroup bGroup,
 @vBPhase bPhase, @flgBphase bPhase
 
 --#17292 declarations
 declare @jciburdenfactor bYN, @jciburdenshift bYN
 
 DECLARE @SMWorkCompletedID bigint, @PRLedgerUpdateMonthID bigint, @JCCostEntryID bigint, @ActualCostTotal bDollar, @SalePrice bDollar
 
 DECLARE @PRSMJCDistributions TABLE (PRSMJCDistributionID int IDENTITY(1,1) NOT NULL,
	JCCostEntryID bigint NOT NULL, JCCostTransaction int NULL, JCCo bCompany NOT NULL, Job bJob NOT NULL, PhaseGroup bGroup NOT NULL, Phase bPhase NOT NULL, CostType bJCCType NOT NULL, 
	ActualDate bDate NOT NULL, PostedUM bUM NOT NULL, ActualHours bHrs DEFAULT(0) NOT NULL, ActualCost bDollar NOT NULL, UM bUM NOT NULL,
	PRCo bCompany NOT NULL, PaySeq tinyint NOT NULL, PostSeq smallint NOT NULL, Employee bEmployee NULL,
	Craft bCraft NULL, Class bClass NULL, Crew varchar(10) NULL,
	EarnFactor bRate NULL, EarnType bEarnType NULL, Shift tinyint NULL, LiabilityType bLiabilityType NULL,
	EmployeeUsed bEmployee NOT NULL, [Type] tinyint NOT NULL,
	EarnCodeUsed bEDLCode NULL, LiabilityTypeUsed bLiabilityType NULL)
 
 select @rcode = 0
 
 -- get Phase Format 
 select @InputMask = InputMask, @InputType= InputType
 from dbo.DDDTShared (nolock) where Datatype ='bPhase'
  
 -- get JC and EM Revenue Interface options from the PR Company
 select @jcicraftclass = JCICraftClass, @jcicrew = JCICrew, @jciemployee = JCIEmployee,
 	@jcifactor = JCIFactor, @jciearntype = JCIEarnType, @jcishift = JCIShift, @jcipostingdate = JCIPostingDate,
     @jciliabtype = JCILiabType, @jciequip = JCIEquip, @jcirevcode = JCIRevCode,
     @emiemployee = EMRevEmployee, @emiphase = EMRevPhase, @emipostingdate = EMRevPostingDate,
 	@jciburdenfactor = JCILiabFactor, @jciburdenshift = JCILiabShift --#17292
 from dbo.bPRCO with (nolock) where PRCo = @prco
 if @@rowcount = 0
     begin
     select @errmsg = 'Missing PR Company!', @rcode = 1
     goto bspexit
     end
 
 -- remove entries from bPRJC interface table where 'old' values equal 0.00
 delete dbo.bPRJC
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
     and OldWorkUnits = 0 and OldHrs = 0 and OldAmt = 0 and OldJCUnits = 0
 -- reset 'current' values on remaining entries
 update dbo.bPRJC
 set TimeUnits = 0, WorkUnits = 0, Hrs = 0, Amt = 0, JCUnits = 0
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
 
 -- remove entries from bPRRB interface table where 'old' values equal 0.00
 delete dbo.bPRRB
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and OldAmt = 0
 -- reset 'current' values on remaining entries
 update dbo.bPRRB
 set Amt = 0
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
 
 -- remove entries from bPRER interface table where 'old' values equal 0.00
 delete dbo.bPRER
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
     and OldTimeUnits = 0 and OldWorkUnits = 0 and OldRevenue = 0
 -- reset 'current' values on remaining entries
 update dbo.bPRER
 set TimeUnits = 0, WorkUnits = 0, Rate = 0, Revenue = 0
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
 
 /* cycle through all Employees in the Pay Period */
 -- create cursor on Employee Pay Seqs
 declare bcEmplSeq cursor LOCAL FAST_FORWARD for
 select Employee, PaySeq
 from dbo.bPRSQ with (nolock)
 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate
 
 open bcEmplSeq
 select @openEmplSeq = 1
 
 -- loop through all Employee Sequences - even unprocessed ones
 next_EmplSeq:
     fetch next from bcEmplSeq into @employee, @payseq
     if @@fetch_status = -1 goto end_EmplSeq --#136430 was goto bspexit but need to first validate back-out entries in PRJC
     if @@fetch_status <> 0 goto next_EmplSeq
 
     -- get Employee Header info
     select @empjcrate = JCFixedRate
     from dbo.bPREH with (nolock) where PRCo = @prco and Employee = @employee
     if @@rowcount = 0
         begin
        select @errortext = 'Missing Header record for Employee#: ' + convert(varchar,@employee)
         exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, 0, @errortext, @errmsg output
         if @rcode = 1 goto bspexit
         goto next_EmplSeq	-- skip this Employee
         end
 
      -- create Job Timecard cursor
      declare bcJCTime cursor LOCAL FAST_FORWARD for
      select h.PostSeq, h.PostDate,h.JCCo, h.Job, h.PhaseGroup, h.Phase, h.JCDept, h.GLCo, h.EMCo, h.Equipment,
      	h.EMGroup, h.RevCode, h.EquipCType, h.UsageUnits, h.Crew, h.Craft, h.Class, h.EarnCode, h.Shift, h.Hours, h.Amt,
      	e.Factor, e.EarnType, CASE WHEN h.[Type] = 'S' THEN h.SMJCCostType ELSE e.JCCostType END, h.EquipPhase, h.[Type]
      from dbo.bPRTH h with (nolock)	-- Timecards
      join dbo.bPREC e with (nolock) on e.PRCo = h.PRCo and e.EarnCode = h.EarnCode
      where h.PRCo = @prco and h.PRGroup = @prgroup and h.PREndDate = @prenddate and h.Employee = @employee
      	and h.PaySeq = @payseq and h.Job is not null and h.Phase is not null and h.[Type] IN ('J', 'S') --#21201
      order by h.JCCo, h.Job, h.PhaseGroup, h.Phase
 
      -- open cursor
      open bcJCTime
      select @openJCTime = 1
 
      -- track last Job
      select @lastjcco = null, @lastjob = null
 
      -- loop through all Timecards
      next_JCTime:
 		fetch next from bcJCTime into @postseq, @postdate, @jcco, @job, @phasegroup, @jcphase, @jcdept, @glco,
          	@emco, @equip, @emgroup, @revcode, @emctype, @usageunits, @crew, @craft, @class, @earncode, @shift,
          	@hours, @amt, @factor, @earntype, @jcctype, @equipphase, @TimeCardType
 
         if @@fetch_status = -1 goto end_JCTime
         if @@fetch_status <> 0 goto next_JCTime

         if @jcco = @lastjcco and @lastjcco is not null goto check_mth
 
         -- get JC Company info
      	select @postclosedjobs = PostClosedJobs, @validphasechars = ValidPhaseChars,
				@postsoftclosedjobs = PostSoftClosedJobs
      	from dbo.bJCCO with (nolock) where JCCo = @jcco
      	if @@rowcount = 0
 			begin
      	    select @errortext = 'Missing JC Company #: ' + convert(varchar(4),@jcco)
      		exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
          	if @rcode = 1 goto bspexit
          	goto next_JCTime	-- skip this Time Card Header
          	end
 
         check_mth:        -- expense month based on posting date
             select @mth = @beginmth
             if @endmth is not null and @cutoffdate is not null and @postdate > @cutoffdate select @mth = @endmth
 
             -- validate 'posted to' GL Company and Month
             if not exists(select * from dbo.bGLCO with (nolock) where GLCo = @glco and @mth > LastMthSubClsd and
       		    @mth <= dateadd(month, MaxOpen, LastMthSubClsd))
 				begin
      		    select @errortext = substring(convert(varchar(8),@mth,3),4,5) + ' is not an open Month in GL Co#: ' + convert(varchar(4),@glco)
      		    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		    if @rcode = 1 goto bspexit
                 goto next_JCTime
      		    end
 
 			 -- issue 22936  validate Fiscal Year 
 			 if not exists(select 1 from dbo.bGLFY with (nolock)
 			 			where GLCo = @glco and @mth >= BeginMth and @mth <= FYEMO)
 			 	 begin
 			 	 select @errortext = 'Missing Fiscal Year for month ' + substring(convert(varchar(8),@mth,3),4,5) + ' to GL Co# ' + convert(varchar(4),@glco)
 	    		 exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 	    		 if @rcode = 1 goto bspexit
 			 	 goto next_JCTime
 			 	 end
 
 			-- #19757 fix to pull job info if either JC Co# or Job changes
             if (@jcco = @lastjcco and @lastjcco is not null) and (@job = @lastjob and @lastjob is not null) goto check_phase
 
             -- get Job info
             select @jobstatus = 1, @liabtemplate = null, @ratetemplate = null
      	    select @jobstatus = JobStatus, @liabtemplate = LiabTemplate, @ratetemplate = RateTemplate	--#123034 added Rate Template
      	    from dbo.bJCJM with (nolock) where JCCo = @jcco and Job = @job
      	    if @@rowcount = 0
                 begin
      		    select @errortext = 'Invalid Job: ' + @job
      		    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		    if @rcode = 1 goto bspexit
                 goto next_JCTime
      		    end
			if @jobstatus = 2 and @postsoftclosedjobs = 'N'
				begin
				select @errortext = 'Job: ' + isnull(@job,'') + ' is soft-closed.'
      		    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		    if @rcode = 1 goto bspexit
				goto next_JCTime
      		    end
			if @jobstatus = 3 and @postclosedjobs = 'N'
         		begin
      		    select @errortext = 'Job: ' + @job + ' is hard-closed.'
      		    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		    if @rcode = 1 goto bspexit
				goto next_JCTime
      		    end
 
             -- get OT phase and cost type overrides from Liability Template
             select @premphase = null, @premcosttype  = null
             select @premphase = Phase, @premcosttype = CostType
             from dbo.bJCTH with (nolock)
             where JCCo = @jcco and LiabTemplate = @liabtemplate
             if @@rowcount = 0
                begin
                select @errortext = 'Job: ' + @job + ' has a missing or invalid Liability Template.'
                exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		   if @rcode = 1 goto bspexit
                goto next_JCTime
      		   end
 
             select @lastjcco = @jcco, @lastjob = @job	-- #19757 save last JC Co# and Job
 
             check_phase:	-- validate phase and get JC Dept
 			 if @flg1jcco=@jcco and @flg1job=@job and @flg1jcphase=@jcphase and @flg1phasegroup=@phasegroup
				and @flg1jcdept is not null and @flg1jcco is not null
 				select @jcdept=@flg1jcdept
 			 else
 				 begin -- flag 1 Issue 26213
 		 		 exec @rcode = dbo.bspJCVPHASE @jcco, @job, @jcphase, @phasegroup, 'N', @dept = @jcdept output, @msg = @errortext output
 		         if @rcode = 1
 		             begin
 						select @flg1jcco=null
 	                    select @errortext = 'Posted Phase: ' + isnull(@errortext,'')
 	                    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 	     		        if @rcode = 1 goto bspexit
 	                    goto next_JCTime
 		             end
 				 select @flg1jcco=@jcco , @flg1job=@job , @flg1jcphase=@jcphase , @flg1phasegroup=@phasegroup ,
 					 @flg1jcdept=@jcdept
 				 end -- flag 1 Issue 26213

			IF @TimeCardType = 'S'
			BEGIN
				SELECT @SMWorkCompletedID = SMWorkCompletedID, @PRLedgerUpdateMonthID = PRLedgerUpdateMonthID
				FROM dbo.vSMWorkCompleted
				WHERE CostCo = @prco AND PRGroup = @prgroup AND PREndDate = @prenddate AND PREmployee = @employee AND PRPaySeq = @payseq AND PRPostSeq = @postseq

				--To prevent work completed that has had WIP transferred from being deleted when a timecard is deleted
				--the work completed is associated with the PRLedgerUpdateMonth and is deleted after all WIP transfers have been
				--reversed out.
				IF @PRLedgerUpdateMonthID IS NULL
				BEGIN
					INSERT dbo.vPRLedgerUpdateMonth (PRCo, PRGroup, PREndDate, Mth)
					VALUES (@prco, @prgroup, @prenddate, @mth)

					SET @PRLedgerUpdateMonthID = SCOPE_IDENTITY()
					
					UPDATE dbo.vSMWorkCompleted
					SET PRLedgerUpdateMonthID = @PRLedgerUpdateMonthID
					WHERE SMWorkCompletedID = @SMWorkCompletedID
				END
				ELSE
				BEGIN
					UPDATE dbo.vPRLedgerUpdateMonth
					SET Mth = @mth
					WHERE PRLedgerUpdateMonthID = @PRLedgerUpdateMonthID
				END

				INSERT dbo.vPRLedgerUpdateMonth (PRCo, PRGroup, PREndDate, Mth)
				VALUES (@prco, @prgroup, @prenddate, @mth)

				SET @PRLedgerUpdateMonthID = SCOPE_IDENTITY()

				EXEC @JCCostEntryID = dbo.vspJCCostEntryCreate @Source = 'SM', @PRLedgerUpdateMonthID = @PRLedgerUpdateMonthID, @msg = @errmsg OUTPUT
				IF @JCCostEntryID = 0
				BEGIN
					EXEC @rcode = dbo.bspPRURInsert @prco = @prco, @prgroup = @prgroup, @prenddate = @prenddate, @employee = @employee, @payseq = @payseq, @postseq = @postseq, @errortext = @errortext, @errmsg = @errmsg OUTPUT
					IF @rcode = 1 GOTO bspexit
					GOTO next_JCTime
				END
				
				INSERT dbo.vSMWorkCompletedJCCostEntry (JCCostEntryID, SMWorkCompletedID)
				VALUES (@JCCostEntryID, @SMWorkCompletedID)
			END
 
  			-- update JC Dept in Timecard (#13497)
 		     -- don't update PRTH if the department already is correct  Issue 26213
  			if not exists(select 1 from dbo.bPRTH with (nolock)
  				where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Employee = @employee
  				and PaySeq = @payseq and PostSeq = @postseq and JCDept = @jcdept) -- Issue 26213
 				begin
 	 			update dbo.bPRTH set JCDept = @jcdept
 	 			where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Employee = @employee
 	 				and PaySeq = @payseq and PostSeq = @postseq
 					and JCDept<>@jcdept -- Issue 26213
 	 			if @@rowcount <> 1
 	 				begin
 	 				select @errortext = 'Unable to update current JC Dept into timecard entry.'
 	 				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 	     		    if @rcode = 1 goto bspexit
 	               	goto next_JCTime
 	     		    end
 				end
 			
             -- validate cost type
             if @hours <> 0.00 or @amt <> 0.00    -- skip validation if both hours and earnings are 0.00
                 begin
 			 	if @flg2jcco=@jcco and @flg2job=@job and @flg2jcphase=@jcphase and @flg2phasegroup=@phasegroup 
 					and @flg2jcctype=@jcctype and @v2um is not null and @flg2jcco is not null -- if nothing has changed then dont reread
 					select @jcum=@v2um
 			 	else
 					begin -- flag 2 Issue 26213
 	                	select @vct = convert(varchar(5),@jcctype)
 	                	exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @phasegroup,@jcphase, @vct, 'N', @um = @jcum output, @msg = @errortext output -- issue 24795 return JCUM
 	                	if @rcode = 1
 	                    begin
 						select @flg2jcco=null -- reset flag 
 	                    	select @errortext = 'Posted Earnings Code: ' + isnull(@errortext,'')
 	                    	exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
 	                         	@errortext, @errmsg output
 	     		        	if @rcode = 1 goto bspexit
 	                    	goto next_JCTime
 	                    end
 			 		select @flg2jcco=@jcco , @flg2job=@job , @flg2jcphase=@jcphase,  @flg2phasegroup=@phasegroup,
 						 @flg2jcctype=@jcctype
 					select @v2um=@jcum
 	                end -- flag 2 Issue 26213
 				end
 
             -- tracking hours on posted earnings?
             select @trackhrs = 'N'
             select @trackhrs = TrackHours from dbo.bJCCT with (nolock) where PhaseGroup = @phasegroup and CostType = @jcctype
 
             select @jchrs = @hours
      	    if @trackhrs = 'N' select @jchrs = 0   -- not tracking hours on this cost type

			-- #123034 - JC Fixed Rate Template
			if @ratetemplate is null
				begin
				select @jcrate = @empjcrate	-- use employee rate if no rate template assigned to job
				goto assign_earnings
				end
			else
				begin
				-- validate fixed rate template and get effective date
				select @effectivedate = EffectiveDate from dbo.bJCRT (nolock)
				where JCCo = @jcco and RateTemplate = @ratetemplate
				if @@rowcount = 0
					begin
					select @errortext = 'Job: ' + @job + ' assigned invalid Fixed Rate Template.'
					exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
					if @rcode = 1 goto bspexit
					goto next_JCTime
					end
				-- get rates from JC Fixed Rate Template
				exec @rcode = dbo.bspPRUpdateGetFixedRate @jcco, @ratetemplate, @prco, @craft, @class,
					@shift, @factor, @employee, @oldjcrate output, @newjcrate output
				-- assign rate based on timecard post date and template effective date
				select @jcrate = @oldjcrate
				if @postdate >= @effectivedate select @jcrate = @newjcrate
				--#138690 if job fixed rate is 0.00 use employee rate by default
				if @jcrate = 0.00 select @jcrate = @empjcrate
				end				

		assign_earnings:
             -- earnings
             select @jcamt = @amt
             if @factor > 1 select @jcamt = @amt / @factor      -- straight time portion
             if @jcrate <> 0 select @jcamt = @hours * @jcrate    -- using JC fixed rate - ignore overtime and burden
 
             -- assign JC interface fields
             if @jcipostingdate = 'N' select @jcfields = convert(char(8),@prenddate,112) -- 'yyyymmdd' format
             if @jcipostingdate = 'Y' select @jcfields = convert(char(8),@postdate,112)
             if @jcicraftclass = 'Y' and @craft is not null select @jcfields = @jcfields + convert(char(10),@craft)
             if @jcicraftclass = 'N' or @craft is null select @jcfields = @jcfields + '          '	-- 10 spaces
             if @jcicraftclass = 'Y' and @class is not null select @jcfields = @jcfields + convert(char(10),@class)
             if @jcicraftclass = 'N' or @class is null select @jcfields = @jcfields + '          '	-- 10 spaces
             if @jcicrew = 'Y' and @crew is not null select @jcfields = @jcfields + convert(char(10),@crew)
             if @jcicrew = 'N' or @crew is null select @jcfields = @jcfields + '          '		-- 10 spaces
             if @jciemployee = 'Y' select @jcfields = @jcfields + convert(char(6),@employee)
             if @jciemployee = 'N' select @jcfields = @jcfields + '      '		-- 6 spaces
             if @jcifactor = 'Y' select @jcfields = @jcfields + convert(char(5),(convert(numeric(4,2),@factor)))  -- convert to fit in 5 chars
             if @jcifactor = 'N' select @jcfields = @jcfields + '     '	-- 5 spaces
             if @jciearntype = 'Y' select @jcfields = @jcfields + convert(char(4),@earntype)
             if @jciearntype = 'N' select @jcfields = @jcfields + '    '	-- 4 spaces
             if @jcishift = 'Y' select @jcfields = @jcfields + convert(char(3),@shift)
             if @jcishift = 'N' select @jcfields = @jcfields + '   ' -- 3 spaces
 
             -- update PR/JC interface table with posted earnings
      	    select @jcfactor = @factor, @jcearntype = @earntype, @jcshift = @shift
      	    if @jcifactor = 'N' select @jcfactor = null
      	    if @jciearntype = 'N' select @jcearntype = null
            if @jcishift = 'N' select @jcshift = null
 
			IF @TimeCardType = 'S'
			BEGIN
				INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
					ActualDate, PostedUM, ActualHours, ActualCost, UM,
					PRCo, PaySeq, PostSeq, Employee,
					Craft, Class, Crew,
					EarnFactor, EarnType, Shift,
					EmployeeUsed, [Type])
				VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @jcphase, @jcctype, 
					CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @jchrs, @jcamt, @jcum,
					@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
					CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
					CASE WHEN @jcifactor = 'Y' THEN @factor END, CASE WHEN @jciearntype = 'Y' THEN @earntype END, CASE WHEN @jcishift = 'Y' THEN @shift END, @employee, 1)
			END
			ELSE
			BEGIN
             exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @jcphase, @jcctype, 'L',
                 @jcfields, @employee, @payseq, @postseq, @postdate, @craft, @class, @crew, @jcfactor, @jcearntype, @jcshift,
                 null, null, null, null, null, null, null, null, 0, @jcum, 0, @jchrs, @jcamt, @jcum, 0 -- issue 24795 write JCUM to PRJC_JCUM and PRJC_TimeUM
			END
 
             -- update premium time (factor <> 1)
             if @factor > 1 and @jcrate = 0
                 begin
                 select @phase = @jcphase, @ctype = @jcctype
                 if @premphase is not null
                     begin
                     select @phase = @premphase
                     -- validate override phase for premium earnings
 					 if @flg3jcco<>@jcco or @flg3job<>@job or @flg3jcphase<>@jcphase or @flg3phasegroup<>@phasegroup 
						or @flg3jcco is null 
 						 begin -- flag 3 Issue 26213
 				 		 exec @rcode = dbo.bspJCVPHASE @jcco, @job, @phase, @phasegroup, 'N', @msg = @errortext output
 				         if @rcode = 1
 				             begin
 								select @flg3jcco=null
 			                    select @errortext = 'Premium Earnings: ' + isnull(@errortext,'')
 			                    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 			     		        if @rcode = 1 goto bspexit
 			                    goto next_JCTime
 				             end
 						 select @flg3jcco=@jcco , @flg3job=@job , @flg3jcphase=@jcphase , @flg3phasegroup=@phasegroup
 						 end -- flag 3 Issue 26213
 					end
                 if @premcosttype is not null select @ctype = @premcosttype
                 if (@premphase is  not null or @premcosttype is not null) and @amt <> 0.00 -- skip validation if 0.00 amt
                     begin
                     -- validate phase/cost type
 				 	if @flg4jcco<>@jcco or  @flg4job<>@job or @flg4jcphase<>@phase or @flg4phasegroup<>@phasegroup 
 							or @flg4ctype<>@ctype or @flg4jcco is null or @vct is null -- if nothing has changed then dont reread
 						begin -- flag 4 Issue 26213
 		                select @vct = convert(varchar(5),@ctype)
 		                exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @phasegroup,@phase, @vct, 'N', @msg = @errortext output -- issue 24795 return JCUM
 		                if @rcode = 1
 		                    begin
 						select @flg4jcco=null -- reset flag 
 		                    select @errortext = 'Premium Earnings: ' + isnull(@errortext,'')
 		                    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
 		                         @errortext, @errmsg output
 		     		        if @rcode = 1 goto bspexit
 		                    goto next_JCTime
 		                    end
 				 		select @flg4jcco=@jcco , @flg4job=@job , @flg4jcphase=@phase,  @flg4phasegroup=@phasegroup,
 							 @flg4ctype=@ctype
 		                end -- flag 4 Issue 26213
 					end
 
                 select @saveamt = @amt / @factor  -- added to eliminate rounding problem with straight time portion
                 select @jcamt = @amt - @saveamt     -- premium portion of posted earnings
 
                 -- update PR/JC interface table with premium time portion
                 if @jcamt <> 0
						IF @TimeCardType = 'S'
						BEGIN
							INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
								ActualDate, PostedUM, ActualCost, UM,
								PRCo, PaySeq, PostSeq, Employee,
								Craft, Class, Crew,
								EarnFactor, EarnType, Shift,
								EmployeeUsed, [Type])
							VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @phase, @ctype, 
								CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @jcamt, @jcum,
								@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
								CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
								CASE WHEN @jcifactor = 'Y' THEN @factor END, CASE WHEN @jciearntype = 'Y' THEN @earntype END, CASE WHEN @jcishift = 'Y' THEN @shift END, @employee, 2)
						END
						ELSE
						BEGIN
                     exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @phase, @ctype, 'L',
                    @jcfields, @employee, @payseq, @postseq, @postdate, @craft, @class, @crew, @jcfactor,
                         @jcearntype, @jcshift, null, null, null, null, null, null, null, null, 0, @jcum, 0, 0, @jcamt, @jcum, 0 -- issue 24795 write JCUM to PRJC_JCUM and PRJC_TimeUM
						END
                 end
 
             -- skip burden if Employee uses a fixed JC rate, or no Liability Template has been assigned to the Job
             if @jcrate <> 0 or @liabtemplate is null goto process_Addons
 
             -- handle burden for the posted earnings using a cursor on Liability types assigned to the Jobs' Liability Template
             declare bcLiabType scroll cursor for
             select LiabType, Phase, CostType, CalcMethod, LiabilityRate, PhaseGroup
             from dbo.bJCTL with (nolock)
             where JCCo = @jcco and LiabTemplate = @liabtemplate
 
             open bcLiabType
             select @openLiabType = 1
 
            if @jciliabtype = 'Y'   -- burden will detailed by liabiliity type, not combined with labor
                begin
                select @jcfactor = null, @jcearntype = null, @jcshift = null -- earn type not used - factor and shift optionally
                end
 
             next_LiabType:
                 fetch next from bcLiabType into @liabtype, @overphase, @overcosttype, @calcmethod, @liabrate, @overphasegrp
 
                 if @@fetch_status = -1 goto process_Addons
                 if @@fetch_status <> 0 goto next_LiabType
 
                 select @jcamt = 0
 
                 if @calcmethod = 'E'    -- interface exact amounts - done only once with posted earnings
                     begin
                     select @jcamt = isnull(sum(l.Amt),0)
                     from dbo.bPRTL l with (nolock)
                     join dbo.bPRDL d with (nolock) on d.PRCo = l.PRCo and d.DLCode = l.LiabCode
                     where l.PRCo = @prco and l.PRGroup = @prgroup and l.PREndDate = @prenddate and l.Employee = @employee
                         and l.PaySeq = @payseq and l.PostSeq = @postseq and d.LiabType = @liabtype
                     end
 
                 if @calcmethod = 'R'    -- interface as a rate of earnings
                     begin
                     if exists(select * from dbo.bJCTE with (nolock) where JCCo = @jcco and LiabTemplate = @liabtemplate
                              and LiabType = @liabtype and EarnCode = @earncode)
                     select @jcamt = @amt * @liabrate    -- earnings must be subject to liability
                     end
 
                 if @jcamt = 0 goto next_LiabType    -- skip burden phase and cost type validation
 
                 -- validate override phase for liability type
          		select @liabphase = @jcphase
                 if @overphase is not null
                     begin
                     select @liabphase = @overphase
  				    if @flg5jcco<>@jcco or @flg5job<>@job or @flg5jcphase<>@liabphase or @flg5phasegroup<>@overphasegrp 
						or @flg5jcco is null 
 						begin -- flag 5 Issue 26213

 	                    exec @rcode = dbo.bspJCVPHASE @jcco, @job, @liabphase, @overphasegrp, 'N', @msg = @errortext output
 	                    if @rcode = 1
 	                        begin
 							select @flg5jcco=null
 	                        select @errortext = 'Liability Type: ' + convert(varchar(6),@liabtype) + ' - ' + isnull(@errortext,'')
 	                        exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 	     		            if @rcode = 1 goto bspexit
 	                        goto next_LiabType
 	                        end
 						select @flg5jcco=@jcco , @flg5job=@job , @flg5jcphase=@liabphase , @flg5phasegroup=@overphasegrp
 						end -- flag 5 Issue 26213
                     end
                 -- validate override phase and/or cost type combination for liability type
                 select @liabcosttype = @jcctype
 
                 if @overcosttype is not null select @liabcosttype = @overcosttype
                 if @overphase is not null or @overcosttype is not null
                     begin
 				 	if @flg6jcco<>@jcco or  @flg6job<>@job or @flg6jcphase<>@liabphase or @flg6phasegroup<>@overphasegrp 
 							or @flg6ctype<>@liabcosttype or @flg6jcco is null or @flg6ctype is null  -- if nothing has changed then dont reread
 						begin -- flag 6 Issue 26213
 		                select @vct = convert(varchar(5),@liabcosttype)
 		                exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @overphasegrp, @liabphase, @vct, 'N', @msg = @errortext output
                     	if @rcode = 1
 		                    begin
 							select @flg6jcco=null -- reset flag 
 		                    select @errortext = 'Liability Type: ' + convert(varchar(6),@liabtype) + ' - ' + isnull(@errortext,'')
                         	exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
 		                         @errortext, @errmsg output
 		     		        if @rcode = 1 goto bspexit
 		                    goto next_LiabType
 		                    end
 				 		select @flg6jcco=@jcco , @flg6job=@job , @flg6jcphase=@liabphase,  @flg6phasegroup=@overphasegrp,
 							 @flg6ctype=@liabcosttype
 		                end -- flag 6 Issue 26213
 					end
 
                 -- update PR/JC interface table with liability amounts
      	        select @type = 'L', @jcliabtype = null	-- default to labor and use labor breakout already in @jcfields
 				if @jciliabtype = 'Y'
 					begin
 					select @type = 'B', @jcliabtype = @liabtype   -- burden will be detailed by liability type in a separate record
      			    select @jcfields = substring(@jcfields,1,44) + convert(char(4),@liabtype)
 					--#17292 optionally include factor and/or shift with burden
             		if @jciburdenfactor = 'Y' 
 						begin
 						select @jcfactor = @factor
 						select @jcfields = @jcfields + convert(char(5),(convert(numeric(4,2),@factor)))  -- convert to fit in 5 chars
 						end
             		if @jciburdenfactor = 'N' 
 						begin
 						select @jcfields = @jcfields + '     '	-- 5 spaces
 						end
 			   		if @jciburdenshift = 'Y' 
 						begin
 						select @jcshift = @shift
             			select @jcfields = @jcfields + convert(char(3),@shift)
 						end
 					if @jciburdenshift = 'N'
 						begin
             			select @jcfields = @jcfields + '   ' -- 3 spaces
 						end
      			    end
 
					IF @TimeCardType = 'S'
					BEGIN
						--Fallback to using the labor PRCo settings if the liability type is not checked
						IF @jciliabtype = 'Y'
						BEGIN
							INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
								ActualDate, PostedUM, ActualCost, UM,
								PRCo, PaySeq, PostSeq, Employee,
								Craft, Class, Crew,
								EarnFactor, Shift, LiabilityType, 
								EmployeeUsed, [Type], LiabilityTypeUsed)
							VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @liabphase, @liabcosttype,
								CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @jcamt, @jcum,
								@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
								CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
								CASE WHEN @jciburdenfactor = 'Y' THEN @factor END, CASE WHEN @jciburdenshift = 'Y' THEN @shift END, @liabtype, @employee, 3, @liabtype)
						END
						ELSE
						BEGIN
							INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
								ActualDate, PostedUM, ActualCost, UM,
								PRCo, PaySeq, PostSeq, Employee,
								Craft, Class, Crew,
								EarnFactor, EarnType, Shift,
								EmployeeUsed, [Type], LiabilityTypeUsed)
							VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @liabphase, @liabcosttype,
								CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @jcamt, @jcum,
								@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
								CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
								CASE WHEN @jcifactor = 'Y' THEN @factor END, CASE WHEN @jciearntype = 'Y' THEN @earntype END, CASE WHEN @jcishift = 'Y' THEN @shift END, @employee, 3, @liabtype)
						END
					END
					ELSE
					BEGIN
                 exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @liabphase,
      			    @liabcosttype, @type, @jcfields, @employee, @payseq, @postseq, @postdate, @craft,
      			    @class, @crew, @jcfactor, @jcearntype, @jcshift, @jcliabtype, null, null, null, null,
                    null, null, null, 0, @jcum, 0, 0, @jcamt, @jcum, 0 -- issue 24795 write JCUM to PRJC_JCUM and PRJC_TimeUM
					END

                 goto next_LiabType
 
             process_Addons:     -- process Addon earnings associated with the timecard
                 if @jcrate <> 0 goto process_EquipUse      -- skip addon earnings if using a fixed rate
 
 
 
                 declare bcAddon cursor LOCAL FAST_FORWARD for
                 select a.EarnCode, a.Amt, e.EarnType, e.JCCostType
                 from dbo.bPRTA a with (nolock)
                 join dbo.bPREC e with (nolock) on e.PRCo = a.PRCo and e.EarnCode = a.EarnCode
                 where a.PRCo = @prco and a.PRGroup = @prgroup and a.PREndDate = @prenddate and a.Employee = @employee
                     and a.PaySeq = @payseq and a.PostSeq = @postseq
 
                 open bcAddon
                 select @openAddon = 1
 
                 next_Addon:
                     fetch next from bcAddon into @earncode, @jcamt, @earntype, @jcctype
 
                     if @@fetch_status = -1 goto end_Addon
          	       if @@fetch_status <> 0 goto next_Addon
 			if @flg7jcco<>@jcco or  @flg7job<>@job or @flg7jcphase<>@phase or @flg7phasegroup<>@phasegroup 
 							or @flg7ctype<>@jcctype or @flg7jcco is null or @flg7ctype is null  -- if nothing has changed then dont reread
 				 begin -- flag 7 Issue 26213
 		                select @vct = convert(varchar(5),@jcctype)
 		                exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @phasegroup,@jcphase, @vct, 'N', @msg = @errortext output -- issue 24795 return JCUM
 		                if @rcode = 1
 		                     begin
 					select @flg7jcco=null -- reset flag 
 		                     select @errortext = 'Addon Earnings: ' + convert(varchar(6),@earncode) + ' - ' + isnull(@errortext,'')
                         	       exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
 		                         @errortext, @errmsg output
 		     		        if @rcode = 1 goto bspexit
 		                      goto next_Addon -- Issue 119731
 		                      end
 				        select @flg7jcco=@jcco , @flg7job=@job , @flg7jcphase=@phase,  @flg7phasegroup=@phasegroup,
 							 @flg7ctype=@jcctype
 		                       end -- flag 7 Issue 26213
 
                     -- adjust 'jcfields' for addon earnings
                     select @jcfields = substring(@jcfields,1,44)
                     if @jcifactor = 'Y' select @jcfields = @jcfields + convert(char(5),(convert(numeric(4,2),@factor)))  -- convert to fit in 5 chars
                     if @jcifactor = 'N' select @jcfields = @jcfields + '     '	-- 5 spaces
                     if @jciearntype = 'Y' select @jcfields = @jcfields + convert(char(4),@earntype)
                     if @jciearntype = 'N' select @jcfields = @jcfields + '    '	-- 4 spaces
                     if @jcishift = 'Y' select @jcfields = @jcfields + convert(char(3),@shift)
                     if @jcishift = 'N' select @jcfields = @jcfields + '   ' -- 3 spaces
 
                     select @jcfactor = @factor, @jcearntype = @earntype, @jcshift = @shift
                     if @jcifactor = 'N' select @jcfactor = null
                     if @jciearntype = 'N' select @jcearntype = null
                     if @jcishift = 'N' select @jcshift = null
 					
 					IF @TimeCardType = 'S'
					BEGIN
						INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
							ActualDate, PostedUM, ActualCost, UM,
							PRCo, PaySeq, PostSeq, Employee,
							Craft, Class, Crew,
							EarnFactor, EarnType, Shift,
							EmployeeUsed, [Type], EarnCodeUsed)
						VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @jcphase, @jcctype, 
							CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @jcamt, @jcum,
							@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
							CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
							CASE WHEN @jcifactor = 'Y' THEN @factor END, CASE WHEN @jciearntype = 'Y' THEN @earntype END, CASE WHEN @jcishift = 'Y' THEN @shift END, @employee, 4, @earncode)
					END
					ELSE
					BEGIN
                     -- update PR/JC interface table with addon earnings
         			exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @jcphase, @jcctype, 'L',
                         @jcfields, @employee, @payseq, @postseq, @postdate, @craft, @class, @crew, @jcfactor,
                         @jcearntype, @jcshift, null, null, null, null, null, null, null, null, 0, @jcum, 0, 0, @jcamt, @jcum, 0 -- issue 24795 write JCUM to PRJC_JCUM and PRJC_TimeUM
					END

                     -- skip Addon burden if Job does not have a Liability Template
                     if @liabtemplate is null goto next_Addon
 
                     if @jciliabtype = 'Y'   -- burden will detailed by liabiliity type, not combined with labor
                        begin
                        select @jcfactor = null, @jcearntype = null, @jcshift = null -- earn type not used - factor and shift optionally
                        end
 
                     -- reset Liability Type cursor - opened with posted earnings above
                     fetch first from bcLiabType into @liabtype, @overphase, @overcosttype, @calcmethod, @liabrate, @overphasegrp
                     	if @@fetch_status = -1 goto next_Addon
              			if @@fetch_status = 0 goto check_LiabType
 
                     next_LiabTypeforAddon:
                         fetch next from bcLiabType into @liabtype, @overphase, @overcosttype, @calcmethod, @liabrate, @overphasegrp
 
                         if @@fetch_status = -1 goto next_Addon
                         if @@fetch_status <> 0 goto next_LiabTypeforAddon
 
                         check_LiabType:     -- process 'rate calculated' burden only - 'exact' updated with posted earnings
                             if @calcmethod <> 'R' goto next_LiabTypeforAddon
 
                             select @amt = 0
 
 							/* -- #25812 don't reset @jcfields - should carry same value as add-on
                             select @jcfields = substring(@jcfields,1,44)	-- reset for burden */
 
                             if exists(select * from dbo.bJCTE with (nolock) where JCCo = @jcco and LiabTemplate = @liabtemplate
                            		and LiabType = @liabtype and EarnCode = @earncode)
                                 begin
                             	select @amt = @jcamt * @liabrate    -- earnings must be subject to liability
                                 end
      			            else
      			                begin
      			                select @amt = 0
      			        		end
                             if @amt = 0 goto next_LiabTypeforAddon
 
                             -- validate override phase for liability type
                             select @liabphase = @jcphase
                             if @overphase is not null
                    				begin
                                 select @liabphase = @overphase
 								if @flg8jcco<>@jcco or @flg8job<>@job or @flg8jcphase<>@liabphase or @flg8phasegroup<>@overphasegrp 
                                     or @flg8jcco is null 
 									begin -- flag 8 Issue 26213				
 				                    exec @rcode = dbo.bspJCVPHASE @jcco, @job, @liabphase, @overphasegrp, 'N', @msg = @errortext output
 				                    if @rcode = 1
 				                        begin
 									select @flg8jcco=null
 				                        select @errortext = 'Liability Type: ' + convert(varchar(6),@liabtype) + ' - ' + isnull(@errortext,'')
 				                        exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 				     		            if @rcode = 1 goto bspexit
 				                        goto next_LiabTypeforAddon
 				                        end
 									select @flg8jcco=@jcco , @flg8job=@job , @flg8jcphase=@liabphase , @flg8phasegroup=@overphasegrp
 									end -- flag 8 Issue 26213
 								end
                             -- validate override phase and/or cost type combination for liability type
                             select @liabcosttype = @jcctype
                             if @overcosttype is not null select @liabcosttype = @overcosttype
                             if @overphase is not null or @overcosttype is not null
                                 begin
 						 		if @flg9jcco<>@jcco or  @flg9job<>@job or @flg9jcphase<>@liabphase or @flg9phasegroup<>@overphasegrp 
 									or @flg9ctype<>@liabcosttype or @flg9jcco is null-- if nothing has changed then dont reread
 									begin -- flag 9 Issue 29213
 					                select @vct = convert(varchar(5),@liabcosttype)
 					                exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @overphasegrp, @liabphase, @vct, 'N', @msg = @errortext output
 			                    	if @rcode = 1
 					        begin
 										select @flg9jcco=null -- reset flag 
 					                    select @errortext = 'Liability Type: ' + convert(varchar(6),@liabtype) + ' - ' + isnull(@errortext,'')
 			                        	exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
 					                         @errortext, @errmsg output
 					     		        if @rcode = 1 goto bspexit
 					                    goto next_LiabTypeforAddon
 					                    end
 							 		select @flg9jcco=@jcco , @flg9job=@job , @flg9jcphase=@liabphase,  @flg9phasegroup=@overphasegrp,
 										 @flg9ctype=@liabcosttype
 									end
 				                end -- flag 9 Issue 26213
 
                         -- update PR/JC interface table with liability amounts
      			        select @type = 'L', @jcliabtype = null	-- default to labor and use labor breakout already in @jcfields
      			        if @jciliabtype = 'Y'
             				begin
      				        select @type = 'B', @jcliabtype = @liabtype  -- burden will be detailed by liability type in a separate record
      				        select @jcfields = substring(@jcfields,1,44)  + convert(char(4),@liabtype)
 							--#17292 optionally include factor and/or shift with burden
 		            		if @jciburdenfactor = 'Y' 
 								begin
 								select @jcfactor = @factor
 								select @jcfields = @jcfields + convert(char(5),(convert(numeric(4,2),@factor)))  -- convert to fit in 5 chars
 								end
 		            		if @jciburdenfactor = 'N' 
 								begin
 								select @jcfields = @jcfields + '     '	-- 5 spaces
 								end
 					   		if @jciburdenshift = 'Y' 
 								begin
 								select @jcshift = @shift
 		            			select @jcfields = @jcfields + convert(char(3),@shift)
 								end
 							if @jciburdenshift = 'N'
 								begin
 		            			select @jcfields = @jcfields + '   ' -- 3 spaces
 								end
      				        end

						IF @TimeCardType = 'S'
						BEGIN
							--Fallback to using the labor PRCo settings if the liability type is not checked
							IF @jciliabtype = 'Y'
							BEGIN
								INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
									ActualDate, PostedUM, ActualCost, UM,
									PRCo, PaySeq, PostSeq, Employee,
									Craft, Class, Crew,
									EarnFactor, Shift, LiabilityType,
									EmployeeUsed, [Type], EarnCodeUsed, LiabilityTypeUsed)
								VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @liabphase, @liabcosttype, 
									CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @amt, @jcum,
									@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
									CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
									CASE WHEN @jciburdenfactor = 'Y' THEN @factor END, CASE WHEN @jciburdenshift = 'Y' THEN @shift END, @liabtype, @employee, 5, @earncode, @liabtype)
							END
							ELSE
							BEGIN
								INSERT @PRSMJCDistributions (JCCostEntryID, JCCo, Job, PhaseGroup, Phase, CostType, 
									ActualDate, PostedUM, ActualCost, UM,
									PRCo, PaySeq, PostSeq, Employee,
									Craft, Class, Crew,
									EarnFactor, EarnType, Shift,
									EmployeeUsed, [Type], EarnCodeUsed, LiabilityTypeUsed)
								VALUES (@JCCostEntryID, @jcco, @job, @phasegroup, @liabphase, @liabcosttype, 
									CASE WHEN @jcipostingdate = 'Y' THEN @postdate ELSE @prenddate END, @jcum, @amt, @jcum,
									@prco, @payseq, @postseq, CASE WHEN @jciemployee = 'Y' THEN @employee END, 
									CASE WHEN @jcicraftclass = 'Y' THEN @craft END, CASE WHEN @jcicraftclass = 'Y' THEN @class END, CASE WHEN @jcicrew = 'Y' THEN @crew END,
									CASE WHEN @jcifactor = 'Y' THEN @factor END, CASE WHEN @jciearntype = 'Y' THEN @earntype END, CASE WHEN @jcishift = 'Y' THEN @shift END, @employee, 5, @earncode, @liabtype)
							END
						END
						ELSE
						BEGIN
                         exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @liabphase, @liabcosttype,
                             @type, @jcfields, @employee, @payseq, @postseq, @postdate, @craft, @class, @crew, @jcfactor,
                              @jcearntype, @jcshift, @jcliabtype, null, null, null, null, null, null, null, 0, @jcum, 0, 0, @amt, @jcum, 0 -- issue 24795 write JCUM to PRJC_JCUM and PRJC_TimeUM
						END

                         goto next_LiabTypeforAddon
 
            end_Addon:  -- cleanup after all addons have been processed for a timecard
                      if @openAddon = 1
                          begin
                          close bcAddon
                          deallocate bcAddon
                          select @openAddon = 0
                          end
                      if @openLiabType = 1
                          begin
                          close bcLiabType
                          deallocate bcLiabType
                          select @openLiabType = 0
                          end
 
             process_EquipUse:   -- process Equipment Usage -  costs to the Job and revenue to the Equipment
                 if @TimeCardType = 'S' OR isnull(@usageunits,0) = 0 goto next_JCTime   -- skip if no usage. SM lines should have no usage.
 
                 -- validate Equipment
                 select @type = Type, @emdept = Department, @category = Category, @status = Status
                 from dbo.bEMEM with (nolock) where EMCo = @emco and Equipment = @equip
                 if @@rowcount = 0
                     begin
     			    select @errortext = 'Invalid Equipment: ' + @equip
     			    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			    if @rcode = 1 goto bspexit
            goto next_JCTime
     			    end
                 if @type <> 'E'
        			    begin
     			    select @errortext = 'Equipment: ' + @equip + ' must be type ''E''.'
     			  exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			    if @rcode = 1 goto bspexit
                     goto next_JCTime
     			    end
                 if @status = 'I'
                     begin
                     select @errortext = 'Equipment: ' + @equip + ' is Inactive.'
     			    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			    if @rcode = 1 goto bspexit
                     goto next_JCTime
     			    end
                  -- validate Revenue Code
                  select @revbasis = Basis, @hrsconv = HrsPerTimeUM
                  from dbo.bEMRC with (nolock) where EMGroup = @emgroup and RevCode = @revcode
                  if @@rowcount = 0
                 begin
                     select @errortext = 'Revenue Code: ' + @revcode + ' is invalid.'
     			    exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			    if @rcode = 1 goto bspexit
                     goto next_JCTime
     			    end
 
                 -- get EM GL Company
                 select @emglco = GLCo from dbo.bEMCO with (nolock) where EMCo = @emco
 
                 -- get EM Revenue GL Account for Dept and Revenue Code - only exists if overriding GL by Breakdown Code
                 select @revglacct = null
                 select @revglacct = GLAcct
                 from dbo.bEMDR with (nolock)
                 where EMCo = @emco and Department = @emdept and EMGroup = @emgroup and RevCode = @revcode
 
                 -- get default Revenue rate
                 exec @rcode = dbo.bspEMRevRateUMDflt @emco, @emgroup, 'J', @equip, @category, @revcode, @jcco, @job,
                     @emrate output, @timeum output, @workum output, @errortext output
                 if @rcode <> 0
                     begin
                     exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			    if @rcode = 1 goto bspexit
                     goto next_JCTime
     			    end
                 -- calculate revenue
                 select @revenue = isnull((@emrate * @usageunits),0)
                 --if @revenue = 0 goto next_JCTime	-- removed for #14425
 
                 -- issue 14181 use/validate equip phase override if any
                 if @equipphase is not null
 					begin
 					select @jcphase = @equipphase
 					if @flgAjcco<>@jcco or @flgAjob<>@job or @flgAjcphase<>@jcphase or @flgAphasegroup<>@phasegroup 
						or 	@flgAjcco is null			
 						begin -- flag A Issue 26213				
 	                    	exec @rcode = dbo.bspJCVPHASE @jcco, @job, @jcphase, @phasegroup, 'N', @msg = @errortext output
 	                    	if @rcode = 1
 	                        	begin
 							select @flgAjcco=null
 	                        select @errortext = 'Liability Type: ' + convert(varchar(6),@liabtype) + ' - ' + isnull(@errortext,'')
 	                        exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
 	     		            if @rcode = 1 goto bspexit
 	                        goto next_JCTime
 	                        end
 						select @flgAjcco=@jcco , @flgAjob=@job , @flgAjcphase=@jcphase , @flgAphasegroup=@phasegroup
 						end -- flag A Issue 26213
                     end
 
                 -- validate phase and equipment cost type - job and phase have already been validated
                 select @vct = convert(varchar(5),@emctype)
                 exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @phasegroup, @jcphase, @vct, 'N', @um = @jcum output, @msg = @errortext output
                	if @rcode = 1
                     begin
                     select @errortext = 'Equipment Cost: ' + isnull(@errortext,'')
                exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
      		        if @rcode = 1 goto bspexit
                     goto next_JCTime
                     end
 
 				-- get JC Dept Expense account - check for override by Phase - #14175
 				select @jcglacct = null
         		select @jcglacct = case @jobstatus when 3 then ClosedExpAcct else OpenWIPAcct end
         		from dbo.bJCDO with (nolock)
         		where JCCo = @jcco and Department = @jcdept and PhaseGroup = @phasegroup and Phase = @jcphase 
 				if @@rowcount = 0 and @validphasechars > 0
 					begin
 					-- check using valid portion
 					--select @pphase = substring(@jcphase,1,@validphasechars) + '%'
 					select @pphase  = substring(@jcphase,1,@validphasechars)
 					if @flgBphase=@jcphase and @flgBphase is not null
 						select @pphase=@vBPhase
 					else
 						begin
 	    				exec @rcode = dbo.bspHQFormatMultiPart @pphase, @InputMask, @pphase output
 						select @vBPhase=@pphase, @flgBphase=@jcphase
 						end
 					select @jcglacct = case @jobstatus when 3 then ClosedExpAcct else OpenWIPAcct end
 					from dbo.bJCDO with (nolock)
 					where JCCo = @jcco and Department = @jcdept and PhaseGroup = @phasegroup and Phase = @pphase 
 					end 
 
 				if @jcglacct is null 
 					begin
 					-- if no Phase override, get GL Account by Cost Type 
                 	select @jcglacct = case @jobstatus when 3 then ClosedExpAcct else OpenWIPAcct end
                 	from dbo.bJCDC with (nolock)
                 	where JCCo = @jcco and Department = @jcdept and PhaseGroup = @phasegroup and CostType = @emctype
                 	if @jcglacct is null
                     	begin
                     	select @errortext = 'Equipment expense GL Account is missing from JC Dept.'
     			     	exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
     			     	if @rcode = 1 goto bspexit
                     	goto next_JCTime
     			     	end
 					end
 
                 -- Time based revenue
                 if @revbasis = 'H'
                     begin
                     select @timeunits = @usageunits, @workunits = 0, @jcunits = 0
                     -- convert Usage Units to Hours if tracking hours on Equipment Cost Type
                     select @trackhrs = 'N'
                     select @trackhrs = TrackHours from dbo.bJCCT with (nolock) where PhaseGroup = @phasegroup and CostType = @emctype
                  select @jchrs = @usageunits * @hrsconv
      	            if @trackhrs = 'N' select @jchrs = 0   -- not tracking hours on this cost type
 			 select @workum = @jcum --issue 24712
                     end
                 -- Unit based revenue
                 if @revbasis = 'U'
                     begin
                     select @timeunits = 0, @workunits = @usageunits, @jcunits = 0, @jchrs = 0
                     if @workum = @jcum select @jcunits = @usageunits
                     end
 
                 -- adjust @jcfields - factor and earnings code are null
                 select @jcfields = substring(@jcfields,1,44)
                 if @jciequip = 'Y' select @jcfields = @jcfields + convert(char(3),@emco) + convert(char(10),@equip)
                 if @jciequip = 'N' select @jcfields = @jcfields + '             '   -- 13 spaces
                 if @jcirevcode = 'Y' select @jcfields = @jcfields + convert(char(3),@emgroup) + convert(char(10),@revcode) --issue 29473  changed @emgroup convert from char(2) to char(3)
                 if @jcirevcode = 'N' select @jcfields = @jcfields + '             '  -- 13 spaces
 
                 -- update bPRJC for type 'E' entry
                 exec bspPRJCInsert @prco, @prgroup, @prenddate, @mth, @jcco, @job, @phasegroup, @jcphase, @emctype, 'E',

                     @jcfields, @employee, @payseq, @postseq, @postdate, @craft, @class, @crew, 0,
                     null, null, null, @emco, @equip, @emgroup, @revcode, @glco, @jcglacct, @timeum, @timeunits,
                     @workum, @workunits, @jchrs, @revenue, @jcum, @jcunits
 
                 -- assign @emfields based on EM interface options
                 if @emipostingdate = 'N' select @emfields = convert(char(8),@prenddate,112) -- 'yyyymmdd' format
                 if @emipostingdate = 'Y' select @emfields = convert(char(8),@postdate,112)
                 select @emfields = @emfields + convert(char(3),@jcco) + convert(char(10),@job)
                 if @emiphase = 'Y' select @emfields = @emfields + convert(char(3),@phasegroup) + convert(char(20),@jcphase)
                     + convert(char(4),@emctype)
                 if @emiphase = 'N' select @emfields = @emfields + '                           ' -- 27 spaces
                 if @emiemployee = 'Y' select @emfields = @emfields + convert(char(6),@employee)
                 if @emiemployee = 'N' select @emfields = @emfields + '      '   -- 6 spaces
 
                 -- update bPRER, bPRRB for equipment revenue
                 exec @rcode =  bspPRERInsert @prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode,
                     @emfields, @employee, @payseq, @postseq, @postdate, @emglco, @revglacct, @jcco, @job,
                     @phasegroup, @jcphase, @emctype, @glco, @jcglacct, @timeum, @timeunits, @workum, @workunits,
                     @emrate, @revenue, @errortext output
                 if @rcode = 1 goto bspexit --goto next_JCTime <--#138770 use bspexit because error came from bspPRURInsert
 
                 goto next_JCTime
 
              end_JCTime:     -- finished with timecards for the Employee/Pay Seq
                 close bcJCTime
      		    deallocate bcJCTime
      		    select @openJCTime = 0
      		    goto next_EmplSeq
 
	--#136430 added formal end_EmplSeq rather than going straight bspexit so that additional validate (see below) gets hit
	end_EmplSeq:
		close bcEmplSeq
		deallocate bcEmplSeq
		select @openEmplSeq = 0

	--#136430 validate job/phase/cost type on bPRJC entries to back out amounts
	-- create and loop through cursor
	declare bcPRJC cursor LOCAL FAST_FORWARD for
	select c.JCCo, c.Job, c.PhaseGroup, c.Phase, c.JCCostType, o.PostClosedJobs, o.PostSoftClosedJobs,
	c.Employee,c.PaySeq,c.PostSeq -- #142061
	from dbo.bPRJC c (nolock)
	join dbo.bJCCO o (nolock) on o.JCCo = c.JCCo
	where c.PRCo = @prco and c.PRGroup = @prgroup and c.PREndDate = @prenddate
	and TimeUnits = 0 and WorkUnits = 0 and Hrs = 0 and Amt = 0 and JCUnits = 0
	AND (OldWorkUnits <> 0 OR OldHrs <> 0 OR OldAmt <> 0 OR OldJCUnits <> 0) --#142061 
	--Include the SM JC distributions for validation
	UNION
	SELECT PRSMJCDistributions.JCCo, PRSMJCDistributions.Job, PRSMJCDistributions.PhaseGroup, PRSMJCDistributions.Phase, PRSMJCDistributions.CostType, bJCCO.PostClosedJobs, bJCCO.PostSoftClosedJobs,
		PRSMJCDistributions.Employee, PRSMJCDistributions.PaySeq, PRSMJCDistributions.PostSeq
	FROM @PRSMJCDistributions PRSMJCDistributions
		INNER JOIN bJCCO ON PRSMJCDistributions.JCCo = bJCCO.JCCo

	open bcPRJC
	select @openPRJC = 1

	next_PRJC:
		fetch next from bcPRJC into @jcco, @job, @phasegroup, @jcphase, @vct, @postclosedjobs, @postsoftclosedjobs,
		@employee, @payseq, @postseq -- #142061
		if @@fetch_status <> -1
			begin
			if @@fetch_status <> 0 goto next_PRJC

			-- validate job
			select @jobstatus = JobStatus
			from dbo.bJCJM with (nolock) where JCCo = @jcco and Job = @job
			if @@rowcount = 0
				begin
				select @errortext = 'Invalid Job: ' + @job
				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
				if @rcode = 1 goto bspexit
				goto next_PRJC
				end
			if @jobstatus = 2 and @postsoftclosedjobs = 'N'
				begin
				select @errortext = 'Job: ' + isnull(@job,'') + ' is soft-closed.'
				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
				if @rcode = 1 goto bspexit
				goto next_PRJC
				end
			if @jobstatus = 3 and @postclosedjobs = 'N'
				begin
				select @errortext = 'Job: ' + @job + ' is hard-closed.'
				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
				if @rcode = 1 goto bspexit
				goto next_PRJC
				end

			-- validate phase
			exec @rcode = dbo.bspJCVPHASE @jcco, @job, @jcphase, @phasegroup, 'N', @msg = @errortext output
			if @rcode = 1
				begin
				select @errortext = 'Posted Phase: ' + isnull(@errortext,'')
				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
				if @rcode = 1 goto bspexit
				goto next_PRJC
				end

			-- validate cost type
			exec @rcode = dbo.bspJCVCOSTTYPE @jcco, @job, @phasegroup, @jcphase, @vct, 'N', @msg = @errortext output
			if @rcode = 1
				begin
				select @errortext = 'Posted Earnings Code: ' + isnull(@errortext,'')
				exec @rcode = dbo.bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq,
					@errortext, @errmsg output
				if @rcode = 1 goto bspexit
				goto next_PRJC
				end

			goto next_PRJC
			end

	close bcPRJC
	deallocate bcPRJC
	select @openPRJC = 0

	/* end #136430 */

	--Update all the JCCostTransaction values by JCCostEntryID
	;WITH UpdateJCCostTransaction
	AS
	(
		SELECT *, ROW_NUMBER() OVER(PARTITION BY JCCostEntryID ORDER BY PRSMJCDistributionID) RowNumber
		FROM @PRSMJCDistributions
	)
	UPDATE UpdateJCCostTransaction
	SET JCCostTransaction = RowNumber

	--If the job is sending revenue as cost to the job then all the distributions should be marked up
	--so that the sum of the distributions matches the price total on the work completed record.
	;WITH MarkupCTE
	AS
	(
		SELECT PRSMJCDistributions.*,
			(PRSMJCDistributions.ActualCost / SUM(PRSMJCDistributions.ActualCost) OVER (PARTITION BY PRSMJCDistributions.JCCostEntryID) * SMWorkCompletedAllCurrent.PriceTotal) MarkupAmount
		FROM @PRSMJCDistributions PRSMJCDistributions
			INNER JOIN dbo.vSMWorkCompletedJCCostEntry ON PRSMJCDistributions.JCCostEntryID =  vSMWorkCompletedJCCostEntry.JCCostEntryID
			INNER JOIN dbo.SMWorkCompletedAllCurrent ON vSMWorkCompletedJCCostEntry.SMWorkCompletedID = SMWorkCompletedAllCurrent.SMWorkCompletedID
			INNER JOIN dbo.vSMWorkOrder ON SMWorkCompletedAllCurrent.SMCo = vSMWorkOrder.SMCo AND SMWorkCompletedAllCurrent.WorkOrder = vSMWorkOrder.WorkOrder
		WHERE vSMWorkOrder.CostingMethod = 'Revenue'
	)
	UPDATE MarkupCTE
	SET ActualCost = MarkupAmount
	
	--With marking up the records there is the possibility due to rounding that the sum doesn't
	--of the distributions don't match the work completed price total so the difference is
	--calculated and added to the first distribution.
	;WITH HandleRoundingCTE
	AS
	(
		SELECT MIN(PRSMJCDistributionID) PRSMJCDistributionID, SUM(ActualCost) ActualCostSum
		FROM @PRSMJCDistributions
		GROUP BY JCCostEntryID
	)
	UPDATE PRSMJCDistributions
	SET ActualCost = SMWorkCompletedAllCurrent.PriceTotal - HandleRoundingCTE.ActualCostSum + PRSMJCDistributions.ActualCost
	FROM HandleRoundingCTE
		INNER JOIN @PRSMJCDistributions PRSMJCDistributions ON HandleRoundingCTE.PRSMJCDistributionID = PRSMJCDistributions.PRSMJCDistributionID
		INNER JOIN dbo.vSMWorkCompletedJCCostEntry ON PRSMJCDistributions.JCCostEntryID =  vSMWorkCompletedJCCostEntry.JCCostEntryID
		INNER JOIN dbo.SMWorkCompletedAllCurrent ON vSMWorkCompletedJCCostEntry.SMWorkCompletedID = SMWorkCompletedAllCurrent.SMWorkCompletedID
		INNER JOIN dbo.vSMWorkOrder ON SMWorkCompletedAllCurrent.SMCo = vSMWorkOrder.SMCo AND SMWorkCompletedAllCurrent.WorkOrder = vSMWorkOrder.WorkOrder
	WHERE vSMWorkOrder.CostingMethod = 'Revenue'

	--Copy the records from the temp table to the JCCostEntryTransaction table
	INSERT dbo.vJCCostEntryTransaction (
			JCCostEntryID, JCCostTransaction, JCCo, Job, PhaseGroup, Phase, CostType,
			ActualDate, PostedUM, ActualHours, ActualCost, UM,
			PRCo, Employee,
			Craft, Class, Crew,
			EarnFactor, EarnType, Shift, LiabilityType)
	SELECT JCCostEntryID, JCCostTransaction, JCCo, Job, PhaseGroup, Phase, CostType,
		ActualDate, PostedUM, ActualHours, ActualCost, UM,
		PRCo, Employee,
		Craft, Class, Crew,
		EarnFactor, EarnType, Shift, LiabilityType
	FROM @PRSMJCDistributions

	--Capture the data used to generate the JCCostEntryTransacion. This is used to
	--relate the gl distributions to the jc distributions.
	UPDATE vPRLedgerUpdateMonth
	SET DistributionXML = (SELECT EmployeeUsed Employee, PaySeq, PostSeq, JCCostTransaction, [Type], EarnCodeUsed EarnCode, LiabilityTypeUsed LiabilityType FROM @PRSMJCDistributions JCCostEntryTransaction WHERE JCCostEntryID = PRSMJCDistributions.JCCostEntryID FOR XML AUTO, TYPE)
	FROM @PRSMJCDistributions PRSMJCDistributions
		INNER JOIN dbo.vJCCostEntry ON PRSMJCDistributions.JCCostEntryID = vJCCostEntry.JCCostEntryID
		INNER JOIN dbo.vPRLedgerUpdateMonth ON vJCCostEntry.PRLedgerUpdateMonthID = vPRLedgerUpdateMonth.PRLedgerUpdateMonthID

      bspexit:    -- clean up all cursors
          --#136430
		  if @openPRJC = 1
              begin
              close bcPRJC
              deallocate bcPRJC
              end
          if @openAddon = 1
              begin
              close bcAddon
              deallocate bcAddon
              end
          if @openLiabType = 1
              begin
              close bcLiabType
              deallocate bcLiabType
              end
          if @openJCTime = 1
              begin
              close bcJCTime
              deallocate bcJCTime
              end
          if @openEmplSeq = 1
			  begin
			  close bcEmplSeq
              deallocate bcEmplSeq
              end
 
         --select @errmsg = @errmsg + char(13) + char(13) + '[bspPRUpdateValJC]'
      	return @rcode

GO
GRANT EXECUTE ON  [dbo].[bspPRUpdateValJC] TO [public]
GO
