SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE   procedure [dbo].[bspPRERInsert]
   /***********************************************************
   * Created: GG 08/10/99
   * Modified: GG 08/18/99    Added updates to bPRRB for Revenue Breakdown
   *			GG 09/14/99  Fixed Revenue GL Account lookup
   *           GG 10/11/99 Check for null GL Revenue Account before insert into bPRRB
   *           GG 04/27/00 Pull Equip rate only if overridden
   *           GG 04/17/01 - fixed EM Revenue Breakdown distributions
   *			GG 09/09/02 - #18502 - update rate to bPRER
   *			EN 10/8/02 - issue 18877 change double quotes to single
   *			EN 3/24/2010 #138770 fix blank user warning generated when validation error is generated by bspPRERInsert
   *		
   * Called from bspPRUpdateValJC procedure to insert or update
   * EM revenue distributions in bPRER and bPRRB prior to an update.
   *
   * Inputs:
   *   @prco          PR Company
   *   @prgroup       PR Group
   *   @prenddate	    Pay Period Ending Date
   *   @mth	        Month to record the revenue in
   *   @emco          EM Company
   *   @equip         Equipment
   *   @emgroup       EM Group
   *   @revcode       Revenue Code
   *   @emfields      EM interface fields - determines level of detail interfaced to EMRD
   *   @employee      Employee #
   *   @payseq        Payment Sequence
   *   @postseq       Posting Sequence of timecard
   *   @postdate      Timecard date
   *   @emglco        EM GL Co#
   *   @revglacct     Equipment Revenue GL Account based on Revenue Code and EM Dept
   *   @jcco          JC Co#
   *   @job           Job
   *   @phasegroup	Phase Group
   *   @phase	        Phase
   *   @emctype       JC Cost Type for Equipment usage
   *   @glco          JC GL Co#
   *   @jcglacct      JC Equipment Expense GL Account
   *   @timeum        Time unit of measure
   *   @timeunits     Time units - if revenue code is time based
   *   @workum        Work unit of measure
   *   @workunits     Work units - if revenue code is unit based
   *   @emrate        Revenue rate
   *   @revenue       Revenue amount
   *
   * Output:
   *   @errmsg        Error message
   *
   * Return Value:
   *   0              successful
   *   1              failure
   *****************************************************/
         (@prco bCompany, @prgroup bGroup, @prenddate bDate, @mth bMonth, @emco bCompany, @equip bEquip,
          @emgroup bGroup, @revcode bRevCode, @emfields char(54), @employee bEmployee, @payseq tinyint,
          @postseq smallint, @postdate bDate, @emglco bCompany, @revglacct bGLAcct, @jcco bCompany, @job bJob,
          @phasegroup bGroup, @phase bPhase, @emctype bJCCType, @glco bCompany, @jcglacct bGLAcct, @timeum bUM,
          @timeunits bUnits, @workum bUM, @workunits bUnits, @emrate bDollar, @revenue bDollar, @errmsg varchar(255) output)
     as
     set nocount on
    
     declare @rcode int, @category varchar(10), @emdept bDept, @rate bDollar, @revtemp varchar(10), @tedisc bPct,
        @totbdownamt bDollar, @bdowncode varchar(10), @bdownrate bDollar, @glacct bGLAcct, @bdownamt bDollar,
        @tcdisc bPct, @errortext varchar(255), @revtemptype char(1), @disc bPct
    
     select @rcode = 0
    
     -- update Equipment Revenue to bPRER
     update bPRER set TimeUnits = TimeUnits + @timeunits, WorkUnits = WorkUnits + @workunits,
         Rate = @emrate, Revenue = Revenue + @revenue	-- #18502 - update rate
     where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
         and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
         and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
     if @@rowcount = 0
         begin
         insert bPRER (PRCo, PRGroup, PREndDate, Mth, EMCo, Equipment, EMGroup, RevCode, EMFields,
         	Employee, PaySeq, PostSeq, PostDate, EMGLCo, RevGLAcct, JCCo, Job, PhaseGroup, Phase,
             JCCType, JCGLCo, JCExpGLAcct, TimeUM, TimeUnits, WorkUM, WorkUnits, Rate, Revenue,
             OldTimeUnits, OldWorkUnits, OldRevenue)
         values (@prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode, @emfields,
        	    @employee, @payseq, @postseq, @postdate, @emglco, @revglacct, @jcco, @job, @phasegroup, @phase,
             @emctype, @glco, @jcglacct, @timeum, @timeunits, @workum, @workunits, @emrate, @revenue,
       0, 0, 0)
         if @@error <> 0
             begin
             select @errortext = 'Unable to add PR Equipment Revenue Distribution entry!'
         	exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
          	--select @rcode = 1 <--commented out for #138770
             goto bspexit
          	end
         end
    
     -- handle EM Revenue Breakdown
     -- get Equipment info
     select @category = Category, @emdept = Department
     from bEMEM where EMCo = @emco and Equipment = @equip
     if @@rowcount = 0
         begin
         select @errortext = 'Invalid Equipment: ' + @equip
         exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
         --select @rcode = 1 <--commented out for #138770
         goto bspexit
         end
    /* -- get standard revenue rate from Category
     select @stdrate = Rate
     from bEMRR
     where EMCo = @emco and Category = @category and EMGroup = @emgroup and RevCode = @revcode
    
     -- check for override by Equipment
     select @stdrate = Rate
     from bEMRH
     where EMCo = @emco and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
        and ORideRate = 'Y' */
    
    -- check for Revenue Template on the Job
    select @revtemp = RevTemplate
    from bEMJT where EMCo = @emco and JCCo = @jcco and Job = @job
    if @revtemp is not null
        begin
        -- get Revenue Template type (Percent or Override)
        select @revtemptype = TypeFlag
        from bEMTH where EMCo = @emco and RevTemplate = @revtemp
        if @@rowcount = 0
            begin
            select @errortext = 'Invalid EM Revenue Template: ' + @revtemp
            exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
            --select @rcode = 1 <--commented out for #138770
            goto bspexit
            end
        -- check Template Equipment
        select @rate = Rate, @tedisc = DiscFromStdRate
        from bEMTE
        where EMCo = @emco and RevTemplate = @revtemp and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
        if @@rowcount = 1 and @revtemptype = 'O'
            begin
            -- pull breakdown codes from bEMTF only if Template is an override type and a rate exists for the equipment
            select @totbdownamt = 0     -- total revenue distributed to breakdown codes
            -- cycle through Breakdown codes in bEMTF, must exist if override template with rates by Equipment
            select @bdowncode = null
            select @bdowncode = min(RevBdownCode)   -- get first
            from bEMTF
            where EMCo = @emco and RevTemplate = @revtemp and Equipment = @equip
                and EMGroup = @emgroup and RevCode = @revcode
            if @bdowncode is null
                begin
                select @errortext = 'Missing Breakdown Codes for Template: '
                    + @revtemp + ' Equipment: ' + @equip + ' and Revenue Code: ' + @revcode
                exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                --select @rcode = 1 <--commented out for #138770
        	    goto bspexit
                end
             while @bdowncode is not null
                begin
                -- get Breakdown Rate
                select @bdownrate = Rate
                from bEMTF
                where EMCo = @emco and RevTemplate = @revtemp and Equipment = @equip
                    and EMGroup = @emgroup and RevCode = @revcode and RevBdownCode = @bdowncode
                -- if exists, use Dept Revenue GL Account for Revenue Code
                select @glacct = @revglacct
                if @glacct is null -- else use Dept Revenue GL Account for Breakdown code
                    begin
                    select @glacct = GLAcct
                    from bEMDB
                    where EMCo = @emco and Department = @emdept and EMGroup = @emgroup and RevBdownCode = @bdowncode
                    end
                -- calculate Breakdown revenue
                select @bdownamt = 0
                if @rate <> 0 select @bdownamt = (@bdownrate / @rate) * @revenue    -- proportional based on rates
                if @bdownamt <> 0
                    begin
                    -- update bPRRB
                    update bPRRB set Amt = Amt + @bdownamt
                    where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                         and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                         and RevBdownCode = @bdowncode and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
                    if @@rowcount = 0
                        begin
                        if @glacct is null
                            begin
                            select @errortext = 'Missing GL Account for Equipment Revenue.'
                            exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                            --select @rcode = 1 <--commented out for #138770
                            goto bspexit
                            end
                        insert bPRRB (PRCo, PRGroup, PREndDate, Mth, EMCo, Equipment, EMGroup, RevCode, EMFields,
         	               RevBdownCode, Employee, PaySeq, PostSeq, Amt, GLCo, GLRevAcct, OldAmt)
                        values (@prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode, @emfields,
                             @bdowncode, @employee, @payseq, @postseq, @bdownamt, @emglco, @glacct, 0)
                        end
                     end
                 select @totbdownamt = @totbdownamt + @bdownamt  -- accumulate distributed Breakdown revenue
                 -- get next Breakdown code
                 select @bdowncode = min(RevBdownCode)
                 from bEMTF
                 where EMCo = @emco and RevTemplate = @revtemp and Equipment = @equip
                    and EMGroup = @emgroup and RevCode = @revcode and RevBdownCode > @bdowncode
                 end
             goto update_diff
             end
    
        -- Equipment not on Template, check for Template Category
        select @rate = Rate, @tcdisc = DiscFromStdRate
        from bEMTC
        where EMCo = @emco and RevTemplate = @revtemp and Category = @category and EMGroup = @emgroup and RevCode = @revcode
        if @@rowcount = 1 and @revtemptype = 'O'
            begin
            -- pull breakdown codes from bEMTD only if Template is an override type and a rate exists for the category
            select @totbdownamt = 0     -- total revenue distributed to breakdown codes
            -- cycle through Breakdown codes in bEMTD
            select @bdowncode = null
            select @bdowncode = min(RevBdownCode)   -- get first
            from bEMTD
            where EMCo = @emco and RevTemplate = @revtemp and Category = @category
                and EMGroup = @emgroup and RevCode = @revcode
            if @bdowncode is null
                begin
                select @errortext = 'Missing Breakdown Codes for Template: '
                    + @revtemp + ' Category: ' + @category + ' and Revenue Code: ' + @revcode
                exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                --select @rcode = 1 <--commented out for #138770
        	    goto bspexit
                end
             while @bdowncode is not null
                 begin
                 -- get Breakdown rate
                 select @bdownrate = Rate
                 from bEMTD
                 where EMCo = @emco and RevTemplate = @revtemp and Category = @category
                     and EMGroup = @emgroup and RevCode = @revcode and RevBdownCode = @bdowncode
                  -- if exists, use Dept Revenue GL Account for Revenue Code
                 select @glacct = @revglacct
                 if @glacct is null -- else use Dept Revenue GL Account for Breakdown code
                    begin
                    select @glacct = GLAcct
                    from bEMDB
                    where EMCo = @emco and Department = @emdept and EMGroup = @emgroup and RevBdownCode = @bdowncode
                    end
                 -- calculate Breakdown revenue
                 select @bdownamt = 0
                 if @rate <> 0 select @bdownamt = (@bdownrate / @rate) * @revenue    -- proportional based on rates
                 if @bdownamt <> 0
                     begin
                     -- update bPRRB
                     update bPRRB set Amt = Amt + @bdownamt
                     where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                         and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                         and RevBdownCode = @bdowncode and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
                     if @@rowcount = 0
                         begin
                         if @glacct is null
                            begin
                            select @errortext = 'Missing GL Account for Equipment Revenue.'
                            exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                            --select @rcode = 1 <--commented out for #138770
                            goto bspexit
                            end
                         insert bPRRB (PRCo, PRGroup, PREndDate, Mth, EMCo, Equipment, EMGroup, RevCode, EMFields,
         	               RevBdownCode, Employee, PaySeq, PostSeq, Amt, GLCo, GLRevAcct, OldAmt)
                         values (@prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode, @emfields,
                             @bdowncode, @employee, @payseq, @postseq, @bdownamt, @emglco, @glacct, 0)
                         end
                     end
                 select @totbdownamt = @totbdownamt + @bdownamt  -- accumulate distributed Breakdown revenue
                 -- get next Breakdown code
                 select @bdowncode = min(RevBdownCode)
                 from bEMTD
                 where EMCo = @emco and RevTemplate = @revtemp and Category = @category
                     and EMGroup = @emgroup and RevCode = @revcode and RevBdownCode > @bdowncode
                 end
             goto update_diff
             end
         end
    
    -- drop through if no Revenue Template or Template w/o override rates (all type P and type O w/o entries for the Equip or Category)
    
    -- assign discount from std rate, will be 0 unless setup in Template
    select @disc = coalesce(@tedisc,@tcdisc,0)
    
    -- check for Revenue Rate override by Equipment
    select @rate = Rate
    from bEMRH where EMCo = @emco and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
        and ORideRate = 'Y'
    if @@rowcount = 1
        begin
        select @rate = (1 - (@disc/100)) * @rate -- apply discount
    
        -- pull breakdown codes from bEMBE if rate exists for the Equipment
        select @totbdownamt = 0     -- total revenue distributed to breakdown codes
         -- cycle through Breakdown codes in bEMBE
         select @bdowncode = null
         select @bdowncode = min(RevBdownCode)   -- get first
         from bEMBE
         where EMCo = @emco and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
         if @bdowncode is null
            begin
            select @errortext = 'Missing Breakdown Codes for Equipment: '
                + @equip + ' and Revenue Code: ' + @revcode
            exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
            --select @rcode = 1 <--commented out for #138770
        	goto bspexit
            end
         while @bdowncode is not null
             begin
             -- get Breakdown rate
             select @bdownrate = Rate
             from bEMBE
             where EMCo = @emco and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
                 and RevBdownCode = @bdowncode
             -- if exists, use Dept Revenue GL Account for Revenue Code
             select @glacct = @revglacct
             if @glacct is null -- else use Dept Revenue GL Account for Breakdown code
                begin
                select @glacct = GLAcct
                from bEMDB
                where EMCo = @emco and Department = @emdept and EMGroup = @emgroup and RevBdownCode = @bdowncode
                end
             -- calculate Breakdown revenue
             select @bdownamt = 0
             if @rate <> 0 select @bdownamt = (@bdownrate / @rate) * @revenue    -- proportional based on rates
             if @bdownamt <> 0
                 begin
                 -- update bPRRB
                 update bPRRB set Amt = Amt + @bdownamt
                 where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                     and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                     and RevBdownCode = @bdowncode and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
                 if @@rowcount = 0
                     begin
                     if @glacct is null
                            begin
                            select @errortext = 'Missing GL Account for Equipment Revenue.'
                            exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                            --select @rcode = 1 <--commented out for #138770
                            goto bspexit
                            end
                     insert bPRRB (PRCo, PRGroup, PREndDate, Mth, EMCo, Equipment, EMGroup, RevCode, EMFields,
         	           RevBdownCode, Employee, PaySeq, PostSeq, Amt, GLCo, GLRevAcct, OldAmt)
                     values (@prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode, @emfields,
                         @bdowncode, @employee, @payseq, @postseq, @bdownamt, @emglco, @glacct, 0)
                     end
                 end
             select @totbdownamt = @totbdownamt + @bdownamt  -- accumulate distributed Breakdown revenue
             -- get next Breakdown code
             select @bdowncode = min(RevBdownCode)
             from bEMBE
             where EMCo = @emco and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode
                 and RevBdownCode > @bdowncode
             end
         goto update_diff
         end
    
    -- no Equipment Rates, check for Category Rate - last stop
    select @rate = Rate
    from bEMRR
    where EMCo = @emco and Category = @category and EMGroup = @emgroup and RevCode = @revcode
    if @@rowcount = 0
          begin
          select @errortext = 'Invalid EM Category: ' + @category + ' and Revenue Code: ' + @revcode
          exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
          --select @rcode = 1 <--commented out for #138770
          goto bspexit
          end
    
    select @rate = (1 - (@disc/100)) * @rate -- apply discount
    
    -- pull breakdown codes from bEMBG
     select @totbdownamt = 0     -- total revenue distributed to breakdown codes
    
     -- cycle through Breakdown codes in bEMBG
     select @bdowncode = null
     select @bdowncode = min(RevBdownCode)   -- get first
     from bEMBG
     where EMCo = @emco and Category = @category and EMGroup = @emgroup and RevCode = @revcode
     if @bdowncode is null
        begin
        select @errortext = 'Missing Breakdown Codes for Category: ' + @category + ' and Revenue Code: ' + @revcode
        exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
        --select @rcode = 1 <--commented out for #138770
        goto bspexit
        end
     while @bdowncode is not null
         begin
         -- get Breakdown rate
         select @bdownrate = Rate
         from bEMBG
         where EMCo = @emco and Category = @category and EMGroup = @emgroup and RevCode = @revcode
             and RevBdownCode = @bdowncode
         -- if exists, use Dept Revenue GL Account for Revenue Code
         select @glacct = @revglacct
         if @glacct is null -- else use Dept Revenue GL Account for Breakdown code
            begin
            select @glacct = GLAcct
            from bEMDB
            where EMCo = @emco and Department = @emdept and EMGroup = @emgroup and RevBdownCode = @bdowncode
            end
         -- calculate Breakdown revenue
         select @bdownamt = 0
         if @rate <> 0 select @bdownamt = (@bdownrate / @rate) * @revenue    -- proportional based on rates
         if @bdownamt <> 0
             begin
             -- update bPRRB
             update bPRRB set Amt = Amt + @bdownamt
             where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                 and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                 and RevBdownCode = @bdowncode and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
             if @@rowcount = 0
                 begin
                 if @glacct is null
                    begin
                    select @errortext = 'Missing GL Account for Equipment Revenue.'
                    exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                    --select @rcode = 1 <--commented out for #138770
                    goto bspexit
                    end
                 insert bPRRB (PRCo, PRGroup, PREndDate, Mth, EMCo, Equipment, EMGroup, RevCode, EMFields,
         	       RevBdownCode, Employee, PaySeq, PostSeq, Amt, GLCo, GLRevAcct, OldAmt)
                 values (@prco, @prgroup, @prenddate, @mth, @emco, @equip, @emgroup, @revcode, @emfields,
                     @bdowncode, @employee, @payseq, @postseq, @bdownamt, @emglco, @glacct, 0)
                 end
             end
         select @totbdownamt = @totbdownamt + @bdownamt  -- accumulate distributed Breakdown revenue
         -- get next Breakdown code
         select @bdowncode = min(RevBdownCode)
         from bEMBG
         where EMCo = @emco and Category = @category and EMGroup = @emgroup and RevCode = @revcode
             and RevBdownCode > @bdowncode
         end
    
     update_diff:  -- add any difference to last Breakdown code
         if @totbdownamt <> @revenue
             begin
             select @bdowncode = max(RevBdownCode)   -- get last Breakdown code
             from bPRRB
             where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                 and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                 and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
             if @bdowncode is null
                 begin
                 select @errortext = 'Unable to fully distribute EM Revenue to Breakdown codes.'
                 exec @rcode = bspPRURInsert @prco, @prgroup, @prenddate, @employee, @payseq, @postseq, @errortext, @errmsg output
                 --select @rcode = 1 <--commented out for #138770
                 goto bspexit
                 end
             update bPRRB set Amt = Amt + (@revenue - @totbdownamt)  -- update difference
             where PRCo = @prco and PRGroup = @prgroup and PREndDate = @prenddate and Mth = @mth and EMCo = @emco
                 and Equipment = @equip and EMGroup = @emgroup and RevCode = @revcode and EMFields = @emfields
                 and RevBdownCode = @bdowncode and Employee = @employee and PaySeq = @payseq and PostSeq = @postseq
             end
    
     bspexit:
         select @errmsg = @errmsg + char(13) + char(10) + '[bspPRERInsert]'
      	return @rcode

GO
GRANT EXECUTE ON  [dbo].[bspPRERInsert] TO [public]
GO
