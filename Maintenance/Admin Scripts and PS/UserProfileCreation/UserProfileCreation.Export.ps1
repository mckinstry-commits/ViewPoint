#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 008b905c-71a9-426f-a8dd-dcd8ffbae950
# Source File: C:\Users\erics\Documents\SAPIEN\PowerShell Studio 2014\Projects\UserProfileCreation\UserProfileCreation.psproj
#------------------------------------------------------------------------
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2014 v4.1.74
     Generated on:       11/10/2014 4:08 PM
     Generated by:       EricS
     Organization:       McKinstry Co
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2014
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)
import-module activedirectory

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$buttonBrowse = New-Object 'System.Windows.Forms.Button'
	$textboxFile = New-Object 'System.Windows.Forms.TextBox'
	$buttonCancelProcess = New-Object 'System.Windows.Forms.Button'
	$buttonRun = New-Object 'System.Windows.Forms.Button'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
		
	}
	
	
	
	
	
	
	$buttonCancelProcess_Click={
		$script:CancelLoop = $true
	}
	
	$buttonRun_Click={
		#Init CancelLoop
		$script:CancelLoop = $false
		$buttonCancelProcess.Enabled = $true
		#Disable the button so we don't trigger it again
		$this.Enabled = $false
		#Reset the Progress Bar
		$progressbar1.Value = 0
		
		Run-AllUsersAdd
		
		for($i = 0; $i -lt $progressbar1.Maximum; $i++)
		{
			#----------------------------------------
			#Place custom script here
			sleep -Milliseconds 5
			
			#----------------------------------------
			#process the pending message
			[System.Windows.Forms.Application]::DoEvents()
			
			if($script:CancelLoop -eq $true)
			{
				#Clear the progress bar
				$progressbar1.Value = 0
				#Exit the loop
				break;
			}
			#Step the progress bar
			$progressbar1.PerformStep() 
		}
		
		#Enable the button so we can click it again
		$this.Enabled = $true
		$buttonCancelProcess.Enabled = $false
	}
	
	$buttonBrowse_Click={
	
		if($openfiledialog1.ShowDialog() -eq 'OK')
		{
			$textboxFile.Text = $openfiledialog1.FileName
		}
	}
	
	
	
	
	#endregion
	$formMain_FormClosed3 = [System.Windows.Forms.FormClosedEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
		#TODO: Place custom script here
		
	}
	
	
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxFile = $textboxFile.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonBrowse.remove_Click($buttonBrowse_Click)
			$buttonCancelProcess.remove_Click($buttonCancelProcess_Click)
			$buttonRun.remove_Click($buttonRun_Click)
			$MainForm.remove_FormClosed($formMain_FormClosed3)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($buttonBrowse)
	$MainForm.Controls.Add($textboxFile)
	$MainForm.Controls.Add($buttonCancelProcess)
	$MainForm.Controls.Add($buttonRun)
	$MainForm.Controls.Add($progressbar1)
	$MainForm.ClientSize = '292, 218'
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Viewpoint User Profile Creator"
	$MainForm.add_FormClosed($formMain_FormClosed3)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# buttonBrowse
	#
	$buttonBrowse.Location = '246, 73'
	$buttonBrowse.Name = "buttonBrowse"
	$buttonBrowse.Size = '30, 23'
	$buttonBrowse.TabIndex = 1
	$buttonBrowse.Text = "..."
	$buttonBrowse.UseVisualStyleBackColor = $True
	$buttonBrowse.add_Click($buttonBrowse_Click)
	#
	# textboxFile
	#
	$textboxFile.AutoCompleteMode = 'SuggestAppend'
	$textboxFile.AutoCompleteSource = 'FileSystem'
	$textboxFile.Location = '12, 75'
	$textboxFile.Name = "textboxFile"
	$textboxFile.Size = '228, 20'
	$textboxFile.TabIndex = 0
	#
	# buttonCancelProcess
	#
	$buttonCancelProcess.Anchor = 'Bottom'
	$buttonCancelProcess.Location = '197, 163'
	$buttonCancelProcess.Name = "buttonCancelProcess"
	$buttonCancelProcess.Size = '79, 23'
	$buttonCancelProcess.TabIndex = 3
	$buttonCancelProcess.Text = "Cancel Process"
	$buttonCancelProcess.UseVisualStyleBackColor = $True
	$buttonCancelProcess.add_Click($buttonCancelProcess_Click)
	#
	# buttonRun
	#
	$buttonRun.Anchor = 'Bottom, Left'
	$buttonRun.Location = '118, 163'
	$buttonRun.Name = "buttonRun"
	$buttonRun.Size = '73, 23'
	$buttonRun.TabIndex = 1
	$buttonRun.Text = "Run"
	$buttonRun.UseVisualStyleBackColor = $True
	$buttonRun.add_Click($buttonRun_Click)
	#
	# progressbar1
	#
	$progressbar1.Anchor = 'Top, Left, Right'
	$progressbar1.Location = '12, 134'
	$progressbar1.Name = "progressbar1"
	$progressbar1.Size = '264, 23'
	$progressbar1.Step = 1
	$progressbar1.TabIndex = 2
	#
	# openfiledialog1
	#
	$openfiledialog1.DefaultExt = "txt"
	$openfiledialog1.Filter = "Excel File (.xlsx)|*.xls*|All Files|*.*"
	$openfiledialog1.ShowHelp = $True
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	Import-Module ActiveDirectory
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	$SqlConnectString = "Server=VIEWPOINTAG\VIEWPOINT;Database=Viewpoint; Integrated Security=SSPI"
	
	function Import-Excel
	{
		param (
			[string]$FileName,
			[string]$WorksheetName,
			[bool]$DisplayProgress = $true
		)
		
		if ($FileName -eq "")
		{
			throw "Please provide path to the Excel file"
			Exit
		}
		
		if (-not (Test-Path $FileName))
		{
			throw "Path '$FileName' does not exist."
			exit
		}
		
		$FileName = Resolve-Path $FileName
		$excel = New-Object -com "Excel.Application"
		$excel.Visible = $false
		$workbook = $excel.workbooks.open($FileName)
		
		if (-not $WorksheetName)
		{
			Write-Warning "Defaulting to the first worksheet in workbook."
			$sheet = $workbook.ActiveSheet
		}
		else
		{
			$sheet = $workbook.Sheets.Item($WorksheetName)
		}
		
		if (-not $sheet)
		{
			throw "Unable to open worksheet $WorksheetName"
			exit
		}
		
		$sheetName = $sheet.Name
		$columns = $sheet.UsedRange.Columns.Count
		$lines = $sheet.UsedRange.Rows.Count
		
		Write-Warning "Worksheet $sheetName contains $columns columns and $lines lines of data"
		
		$fields = @()
		
		for ($column = 1; $column -le $columns; $column++)
		{
			$fieldName = $sheet.Cells.Item.Invoke(1, $column).Value2
			if ($fieldName -eq $null)
			{
				$fieldName = "Column" + $column.ToString()
			}
			$fields += $fieldName
		}
		
		$line = 2
		
		
		for ($line = 2; $line -le $lines; $line++)
		{
			$values = New-Object object[] $columns
			for ($column = 1; $column -le $columns; $column++)
			{
				$values[$column - 1] = $sheet.Cells.Item.Invoke($line, $column).Value2
			}
			
			$row = New-Object psobject
			$fields | foreach-object -begin { $i = 0 } -process {
				$row | Add-Member -MemberType noteproperty -Name $fields[$i] -Value $values[$i]; $i++
			}
			$row
			$percents = [math]::round((($line/$lines) * 100), 0)
			if ($DisplayProgress)
			{
				Write-Progress -Activity:"Importing from Excel file $FileName" -Status:"Imported $line of total $lines lines ($percents%)" -PercentComplete:$percents
			}
		}
		$workbook.Close()
		$excel.Quit()
	}
	
	function Run-AllUsersAdd
	{
		
		$FilePath = $textboxFile.Text
		$Group = "ViewpointUsers"
		$Package = "PM"
		#$Stuff = Import-CSV $FilePath
		#$Stuff = Import-Excel -FileName = $FilePath -DisplayProgress $true
		#WRITE $Group
		try
		{
			$members = @()
			Get-ADGroupMember -Identity $Group | Select-Object -ExpandProperty SamAccountName | ForEach-Object{ $members += $_.toLower() }
		}
		catch
		{
			$error.Message
		}
		#WRITE $members.mail
		
		$members -eq $NULL
		
		#ForEach ($member IN $members)
		#{
		#    WRITE-HOST $member
		#}
		
		$File = Import-Excel -FileName $FilePath -DisplayProgress $false
		ForEach ($Record IN $File)
		{
			#Write-Host $Record.Email
			[string]$Email = $Record.Email
			If ($Email -eq $null)
			{
				CONTINUE
			}
			$User = Get-ADUser -Filter { EmailAddress -eq $Email } -Properties * | Select-Object -ExpandProperty SamAccountName
			
			If ($members -notcontains $User)
			{
				Add-ADGroupMember -Identity $Group -Member $User -PassThru -ErrorAction SilentlyContinue
				$members += $User
				Write-Host $User "Added to domain group " $Group
				#CONTINUE
			}
			Else
			{
				Write-Host $User "Already a member of " $Group
				#CONTINUE
			}
			
		}
		
		ForEach ($Record IN $File)
		{
			[string]$Email = $Record.Email
			
			If ($Email -eq $null)
			{
				CONTINUE
			}
			$User = Get-ADUser -Filter { EmailAddress -eq $Email } -Properties * | Select-Object -ExpandProperty SamAccountName
			$DefCompany = $Record.PRCo.Trim()
			$DefCompany = $DefCompany.Substring(0, 2) -replace '"', ''
			
			#Write-Host $DefCompany
			
			$Name = $Record.Name
			$Employee = $Record.Employee
					
			#$AddUser = ADAddUser $Record.Email $Group
			#SProcs $User $Record.Email $DefCompany $Name $Employee $Package
			
			#Stored proc to execute
			[string]$StoredProcedure = "dbo.mckspAddUserAccount"
			
			# Stored procedure return parameter name
			[string]$StoredProcedureReturnParameter = "@rcode"
			# Stored procedure output parameter name
			[string]$StoredProcedureOutputParameter = "@ReturnMessage"
			
			
			[System.Collections.Hashtable]$ProcParameterValueMappings = @{ "@UserName" = $User; "Email" = $Email; "@DefCompany" = $DefCompany; "@FullName" = $Name; "@Employee" = $Employee; "@Package" = $Package; }
			
			
			$SqlConnection = New-Object System.Data.SqlClient.SqlConnection
			$SqlConnection.ConnectionString = $SqlConnectString
			
			
			
			Write-Host "opening sql connection..."
			$SqlConnection.Open() | Out-Null
			
			$SqlCmd = New-Object System.Data.SqlClient.SqlCommand
			$SqlCmd.Connection = $SqlConnection
			$SqlCmd.CommandType = [System.Data.CommandType]::StoredProcedure
			$SqlCmd.CommandText = $StoredProcedure
			
			$SqlCmd.Parameters.Add($StoredProcedureReturnParameter, [System.Data.SqlDbType]::Int) | Out-Null
			$SqlCmd.Parameters[$StoredProcedureReturnParameter].Direction = [System.Data.ParameterDirection]::ReturnValue;
			
			$SqlCmd.Parameters.Add($StoredProcedureOutputParameter, [System.Data.SqlDbType]::VarChar, 255) | Out-Null
			$SqlCmd.Parameters[$StoredProcedureOutputParameter].Direction = [System.Data.ParameterDirection]::Output;
			
			
			foreach ($ProcParameter in $ProcParameterValueMappings.Keys)
			{
				$SqlCmd.Parameters.Add($ProcParameter, $ProcParameterValueMappings[$ProcParameter]) | Out-Null
				
			}
			
			Write-Host "Executing proc..."
			$SqlCmd.ExecuteNonQuery() | Out-Null
			
			
			$OutputValue = $SqlCmd.Parameters[$StoredProcedureOutputParameter].Value;
			WRITE-HOST 
			
			
			Write-Host "Proc Ran for " $Name "," $User
			Write-Host $OutputValue
			$progressbar1.PerformStep()
			$SqlConnection.Close() | Out-Null
			$SqlCmd.Dispose() | Out-Null
			CONTINUE
		}
		
		#RETURN $OutputValue
	}#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)

# SIG # Begin signature block
# MIITrgYJKoZIhvcNAQcCoIITnzCCE5sCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB
# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR
# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUJghCqfz3Y6pptTQyQGt+gZXK
# TvCggg36MIIEFDCCAvygAwIBAgILBAAAAAABL07hUtcwDQYJKoZIhvcNAQEFBQAw
# VzELMAkGA1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNV
# BAsTB1Jvb3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw0xMTA0
# MTMxMDAwMDBaFw0yODAxMjgxMjAwMDBaMFIxCzAJBgNVBAYTAkJFMRkwFwYDVQQK
# ExBHbG9iYWxTaWduIG52LXNhMSgwJgYDVQQDEx9HbG9iYWxTaWduIFRpbWVzdGFt
# cGluZyBDQSAtIEcyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlO9l
# +LVXn6BTDTQG6wkft0cYasvwW+T/J6U00feJGr+esc0SQW5m1IGghYtkWkYvmaCN
# d7HivFzdItdqZ9C76Mp03otPDbBS5ZBb60cO8eefnAuQZT4XljBFcm05oRc2yrmg
# jBtPCBn2gTGtYRakYua0QJ7D/PuV9vu1LpWBmODvxevYAll4d/eq41JrUJEpxfz3
# zZNl0mBhIvIG+zLdFlH6Dv2KMPAXCae78wSuq5DnbN96qfTvxGInX2+ZbTh0qhGL
# 2t/HFEzphbLswn1KJo/nVrqm4M+SU4B09APsaLJgvIQgAIMboe60dAXBKY5i0Eex
# +vBTzBj5Ljv5cH60JQIDAQABo4HlMIHiMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMB
# Af8ECDAGAQH/AgEAMB0GA1UdDgQWBBRG2D7/3OO+/4Pm9IWbsN1q1hSpwTBHBgNV
# HSAEQDA+MDwGBFUdIAAwNDAyBggrBgEFBQcCARYmaHR0cHM6Ly93d3cuZ2xvYmFs
# c2lnbi5jb20vcmVwb3NpdG9yeS8wMwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2Ny
# bC5nbG9iYWxzaWduLm5ldC9yb290LmNybDAfBgNVHSMEGDAWgBRge2YaRQ2XyolQ
# L30EzTSo//z9SzANBgkqhkiG9w0BAQUFAAOCAQEATl5WkB5GtNlJMfO7FzkoG8IW
# 3f1B3AkFBJtvsqKa1pkuQJkAVbXqP6UgdtOGNNQXzFU6x4Lu76i6vNgGnxVQ380W
# e1I6AtcZGv2v8Hhc4EvFGN86JB7arLipWAQCBzDbsBJe/jG+8ARI9PBw+DpeVoPP
# PfsNvPTF7ZedudTbpSeE4zibi6c1hkQgpDttpGoLoYP9KOva7yj2zIhd+wo7AKvg
# IeviLzVsD440RZfroveZMzV+y5qKu0VN5z+fwtmK+mWybsd+Zf/okuEsMaL3sCc2
# SI8mbzvuTXYfecPlf5Y1vC0OzAGwjn//UYCAp5LUs0RGZIyHTxZjBzFLY7Df8zCC
# BJ8wggOHoAMCAQICEhEhQFwfDtJYiCvlTYaGuhHqRTANBgkqhkiG9w0BAQUFADBS
# MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEoMCYGA1UE
# AxMfR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBHMjAeFw0xMzA4MjMwMDAw
# MDBaFw0yNDA5MjMwMDAwMDBaMGAxCzAJBgNVBAYTAlNHMR8wHQYDVQQKExZHTU8g
# R2xvYmFsU2lnbiBQdGUgTHRkMTAwLgYDVQQDEydHbG9iYWxTaWduIFRTQSBmb3Ig
# TVMgQXV0aGVudGljb2RlIC0gRzEwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
# AoIBAQCwF66i07YEMFYeWA+x7VWk1lTL2PZzOuxdXqsl/Tal+oTDYUDFRrVZUjtC
# oi5fE2IQqVvmc9aSJbF9I+MGs4c6DkPw1wCJU6IRMVIobl1AcjzyCXenSZKX1GyQ
# oHan/bjcs53yB2AsT1iYAGvTFVTg+t3/gCxfGKaY/9Sr7KFFWbIub2Jd4NkZrItX
# nKgmK9kXpRDSRwgacCwzi39ogCq1oV1r3Y0CAikDqnw3u7spTj1Tk7Om+o/SWJMV
# TLktq4CjoyX7r/cIZLB6RA9cENdfYTeqTmvT0lMlnYJz+iz5crCpGTkqUPqp0Dw6
# yuhb7/VfUfT5CtmXNd5qheYjBEKvAgMBAAGjggFfMIIBWzAOBgNVHQ8BAf8EBAMC
# B4AwTAYDVR0gBEUwQzBBBgkrBgEEAaAyAR4wNDAyBggrBgEFBQcCARYmaHR0cHM6
# Ly93d3cuZ2xvYmFsc2lnbi5jb20vcmVwb3NpdG9yeS8wCQYDVR0TBAIwADAWBgNV
# HSUBAf8EDDAKBggrBgEFBQcDCDBCBgNVHR8EOzA5MDegNaAzhjFodHRwOi8vY3Js
# Lmdsb2JhbHNpZ24uY29tL2dzL2dzdGltZXN0YW1waW5nZzIuY3JsMFQGCCsGAQUF
# BwEBBEgwRjBEBggrBgEFBQcwAoY4aHR0cDovL3NlY3VyZS5nbG9iYWxzaWduLmNv
# bS9jYWNlcnQvZ3N0aW1lc3RhbXBpbmdnMi5jcnQwHQYDVR0OBBYEFNSihEo4Whh/
# uk8wUL2d1XqH1gn3MB8GA1UdIwQYMBaAFEbYPv/c477/g+b0hZuw3WrWFKnBMA0G
# CSqGSIb3DQEBBQUAA4IBAQACMRQuWFdkQYXorxJ1PIgcw17sLOmhPPW6qlMdudEp
# Y9xDZ4bUOdrexsn/vkWF9KTXwVHqGO5AWF7me8yiQSkTOMjqIRaczpCmLvumytmU
# 30Ad+QIYK772XU+f/5pI28UFCcqAzqD53EvDI+YDj7S0r1txKWGRGBprevL9DdHN
# fV6Y67pwXuX06kPeNT3FFIGK2z4QXrty+qGgk6sDHMFlPJETiwRdK8S5FhvMVcUM
# 6KvnQ8mygyilUxNHqzlkuRzqNDCxdgCVIfHUPaj9oAAy126YPKacOwuDvsu4uyom
# jFm4ua6vJqziNKLcIQ2BCzgT90Wj49vErKFtG7flYVzXMIIFOzCCBCOgAwIBAgIH
# KxAqSxlENDANBgkqhkiG9w0BAQUFADCByjELMAkGA1UEBhMCVVMxEDAOBgNVBAgT
# B0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHku
# Y29tLCBJbmMuMTMwMQYDVQQLEypodHRwOi8vY2VydGlmaWNhdGVzLmdvZGFkZHku
# Y29tL3JlcG9zaXRvcnkxMDAuBgNVBAMTJ0dvIERhZGR5IFNlY3VyZSBDZXJ0aWZp
# Y2F0aW9uIEF1dGhvcml0eTERMA8GA1UEBRMIMDc5NjkyODcwHhcNMTIwNDAzMTYy
# OTE3WhcNMTUwNTIwMTg0NzI0WjBmMQswCQYDVQQGDAJVUzELMAkGA1UECAwCV0Ex
# EDAOBgNVBAcMB1NlYXR0bGUxGzAZBgNVBAoMEk1jS2luc3RyeSBDby4sIExMQzEb
# MBkGA1UEAwwSTWNLaW5zdHJ5IENvLiwgTExDMIIBIjANBgkqhkiG9w0BAQEFAAOC
# AQ8AMIIBCgKCAQEAmUKpZO0+EmXweMLx/cl1x+Fp0QYe2Y2pNwl5P96sy92Nz/JW
# QBtVCjgME+CfSTQH5Ud5MtbTjrqbfZvU6HwSKVl0gbRZkdgItjYLWJ3VDZelKex3
# rbmwwiJ/5CtGo4PanYPLIfjksApfXWQwOJ4drhVHCJtgDJFZmax5UeJ2k3Jw03eN
# UzWU3R5DSaUBvOgIdMLlvpbalO3bmLlOD9HEVclHDLvp4KMdVMvgcIl/zX7PvlvM
# R5aoi3HYUjUinaNyUWzPIF1pwfvemief2i+AaXoFgxkjNRv/MYC16/YR8un02ADp
# v3Y5UirhEToQgLpBq8EEhNoALc5Ah7YYp3s1HQIDAQABo4IBhzCCAYMwDwYDVR0T
# AQH/BAUwAwEBADATBgNVHSUEDDAKBggrBgEFBQcDAzAOBgNVHQ8BAf8EBAMCB4Aw
# MwYDVR0fBCwwKjAooCagJIYiaHR0cDovL2NybC5nb2RhZGR5LmNvbS9nZHM1LTE2
# LmNybDBTBgNVHSAETDBKMEgGC2CGSAGG/W0BBxcCMDkwNwYIKwYBBQUHAgEWK2h0
# dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS8wgYAGCCsG
# AQUFBwEBBHQwcjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZ29kYWRkeS5jb20v
# MEoGCCsGAQUFBzAChj5odHRwOi8vY2VydGlmaWNhdGVzLmdvZGFkZHkuY29tL3Jl
# cG9zaXRvcnkvZ2RfaW50ZXJtZWRpYXRlLmNydDAfBgNVHSMEGDAWgBT9rGEyk2xF
# 1uLuhV+auud2mWjM5zAdBgNVHQ4EFgQUk93pM4DzXTsE+jgTx8VLJ5PIEcEwDQYJ
# KoZIhvcNAQEFBQADggEBALPObKoLjdPEtBmVthOIJIIM/JRAE00B72RTLLECQZZe
# nPmIyJVQs/s/VzQ9biIc9mYtvUnqRrp/kQIScjISpgufPWUrs/4xOhfRpIKumCOs
# I1uDTQZF7Ezp4CxMuo2+o5fS9SaKzChiMNtEJdaOU5ldr7DFClILnqIA7TUpktMp
# tmdocLmNty+eMY5OY2r4/74msBzutEvy8iUfX8LnpL0IK5tN/neY5y0Pwhu4Xdt9
# GB12HFJ0F4UhienVc6IaMtQFxn3Vl7AX9/dc+qsRzobIiHjQoBnnEzLLPuzsSdNe
# kH9ag+klkIEP8s1laqz6fI/aRrDPT6e91wt+mHIWaU0xggUeMIIFGgIBATCB1jCB
# yjELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0
# c2RhbGUxGjAYBgNVBAoTEUdvRGFkZHkuY29tLCBJbmMuMTMwMQYDVQQLEypodHRw
# Oi8vY2VydGlmaWNhdGVzLmdvZGFkZHkuY29tL3JlcG9zaXRvcnkxMDAuBgNVBAMT
# J0dvIERhZGR5IFNlY3VyZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTERMA8GA1UE
# BRMIMDc5NjkyODcCBysQKksZRDQwCQYFKw4DAhoFAKB4MBgGCisGAQQBgjcCAQwx
# CjAIoAKAAKECgAAwGQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYBBAGC
# NwIBCzEOMAwGCisGAQQBgjcCARUwIwYJKoZIhvcNAQkEMRYEFB4FEdzsnGIlnC1M
# zwukfZQYp5wCMA0GCSqGSIb3DQEBAQUABIIBAEaVN0/7EBvYVr1FJSeCr8O7PpPI
# QjMMWy4sWfpvTO0rO1sxJtRArqArRVGNNVKzZgkOH35h7HujrbPHM1MZPWaDMCRi
# /rfHtWghDsxEtkTVZwjL7u3RpGHTsabmWErO+KxHUULyowHSHQ834i14h6RdGiq6
# MEM9ZS79ci3MySrpVh4mO8LTOqjjDYQORIPpMDqEEhXIIXHBIXMdbsejFvxgWAnb
# PDkapX+jRQffE+0mCUdo3zXXohQcLYHPmvZnKpjKtrSE/JQvBJ4NqK9Eq292nOK/
# r3qr6buY5jaDvIGFBCa+aS0QlVN5sPtj0zEXuTZc0C7O/7MSLiheH1145mahggKi
# MIICngYJKoZIhvcNAQkGMYICjzCCAosCAQEwaDBSMQswCQYDVQQGEwJCRTEZMBcG
# A1UEChMQR2xvYmFsU2lnbiBudi1zYTEoMCYGA1UEAxMfR2xvYmFsU2lnbiBUaW1l
# c3RhbXBpbmcgQ0EgLSBHMgISESFAXB8O0liIK+VNhoa6EepFMAkGBSsOAwIaBQCg
# gf0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3DQEHATAcBgkqhkiG9w0BCQUxDxcNMTQx
# MTExMDAwODU0WjAjBgkqhkiG9w0BCQQxFgQU7QjqpbfhzxpUD2PrVaNbJ/urQTgw
# gZ0GCyqGSIb3DQEJEAIMMYGNMIGKMIGHMIGEBBSM5p9QEuHRqPs5Xi4x4rQr3js0
# OzBsMFakVDBSMQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1z
# YTEoMCYGA1UEAxMfR2xvYmFsU2lnbiBUaW1lc3RhbXBpbmcgQ0EgLSBHMgISESFA
# XB8O0liIK+VNhoa6EepFMA0GCSqGSIb3DQEBAQUABIIBAAnmpFjuYtAsm61egy2g
# 2PP/v+dk3h4EOwa+QEQSNzL6fpTclFvYd8ehqOKD6P8MVDja2sztddOPbVELFiqI
# gtqZH90MOK7S8xc4QbwthXPEdDBYez9QIBIIYOMq2rxFXn1hvpXIG5Aw/XBCzvX2
# 8FjIHOR4WH5u5Uc/nPWHabDXQqqcucN0FcMSmhtmOhqHfkqzIrOKPimHvV/QlBxi
# slwfmbI9HvN6XRWc7wBaw21F7iGV3Xt8FPBghMI3z8oAsDrK8dXrs8HwpbSjrO0w
# ccaZpDdMSzXOsJUXVLO9WEMY+kNMel1TZCZ455HR9d7ie3yOr6wFMYRIWJmTKXYn
# AJc=
# SIG # End signature block
