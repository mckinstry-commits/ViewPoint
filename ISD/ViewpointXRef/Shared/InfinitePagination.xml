<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ComponentDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.ironspeed.com/designer">
  <Generator>Iron Speed Designer</Generator>
  <Version>11.1.0</Version>
  <Self>
    <Name>InfinitePagination</Name>
    <Type>Pagination</Type>
    <SubType>DotNet</SubType>
    <PopupCssClass>QPageSize</PopupCssClass>
    <GenerateDirectory>Shared</GenerateDirectory>
    <Layout>Shared\InfinitePagination.html</Layout>
    <DisplayName>InfinitePagination</DisplayName>
    <Description>(Description)</Description>
    <CheckSum>CUSTOMIZED</CheckSum>
  </Self>
  <ComposedOf>
    <ContainedComponent>
      <Name>CurrentPage</Name>
      <Type>TextBox</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CssClass</Name>
          <Value>Pagination_Input</Value>
        </Attribute>
        <Attribute>
          <Name>EnableIncrementDecrementButtons</Name>
          <Value>Default</Value>
        </Attribute>
        <Attribute>
          <Name>MaxLength</Name>
          <Value>10</Value>
        </Attribute>
        <Attribute>
          <Name>Size</Name>
          <Value>5</Value>
        </Attribute>
        <Attribute>
          <Name>Visible</Name>
          <Value>False</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>FirstPage</Name>
      <Type>ImageButton</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CausesValidation</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>CommandName</Name>
          <Value>FirstPage</Value>
        </Attribute>
        <Attribute>
          <Name>ImageURL</Name>
          <Value>../Images/ButtonBarFirst.gif</Value>
        </Attribute>
        <Attribute>
          <Name>onclientclick</Name>
          <Value>return SubmitHRefOnce(this, "");</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseout</Name>
          <Value>this.src='../Images/ButtonBarFirst.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseover</Name>
          <Value>this.src='../Images/ButtonBarFirstOver.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>ToolTip</Name>
          <Value>Btn:FirstPage</Value>
          <Type>ResourceReference</Type>
        </Attribute>
        <Attribute>
          <Name>Visible</Name>
          <Value>False</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>LastPage</Name>
      <Type>ImageButton</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CausesValidation</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>CommandName</Name>
          <Value>LastPage</Value>
        </Attribute>
        <Attribute>
          <Name>ImageURL</Name>
          <Value>../Images/ButtonBarLast.gif</Value>
        </Attribute>
        <Attribute>
          <Name>onclientclick</Name>
          <Value>return SubmitHRefOnce(this, "");</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseout</Name>
          <Value>this.src='../Images/ButtonBarLast.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseover</Name>
          <Value>this.src='../Images/ButtonBarLastOver.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>ToolTip</Name>
          <Value>Btn:LastPage</Value>
          <Type>ResourceReference</Type>
        </Attribute>
        <Attribute>
          <Name>Visible</Name>
          <Value>False</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>NextPage</Name>
      <Type>ImageButton</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CausesValidation</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>CommandName</Name>
          <Value>NextPage</Value>
        </Attribute>
        <Attribute>
          <Name>ImageURL</Name>
          <Value>../Images/ButtonBarNext.gif</Value>
        </Attribute>
        <Attribute>
          <Name>onclientclick</Name>
          <Value>return SubmitHRefOnce(this, "");</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseout</Name>
          <Value>this.src='../Images/ButtonBarNext.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseover</Name>
          <Value>this.src='../Images/ButtonBarNextOver.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>ToolTip</Name>
          <Value>Btn:NextPage</Value>
          <Type>ResourceReference</Type>
        </Attribute>
        <Attribute>
          <Name>Visible</Name>
          <Value>False</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>PageSize</Name>
      <Type>TextBox</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CssClass</Name>
          <Value>Pagination_Input</Value>
        </Attribute>
        <Attribute>
          <Name>EnableIncrementDecrementButtons</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>MaxLength</Name>
          <Value>5</Value>
        </Attribute>
        <Attribute>
          <Name>onchange</Name>
          <Value>ISD_InfiScrollHandler(this)</Value>
        </Attribute>
        <Attribute>
          <Name>PageSizeRequiredFieldValidator:Text</Name>
          <Value>10</Value>
        </Attribute>
        <Attribute>
          <Name>style</Name>
          <Value>visibility:hidden;display:none</Value>
        </Attribute>
        <Attribute>
          <Name>Text</Name>
          <Value>10</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>PageSizeButton</Name>
      <Type>LinkButton</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CausesValidation</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>CommandName</Name>
          <Value>PageSize</Value>
        </Attribute>
        <Attribute>
          <Name>CssClass</Name>
          <Value>button_link</Value>
        </Attribute>
        <Attribute>
          <Name>style</Name>
          <Value>visibility:hidden;display:none</Value>
        </Attribute>
        <Attribute>
          <Name>Text</Name>
          <Value>Txt:PageSize</Value>
          <Type>ResourceReference</Type>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>PageSizeText</Name>
      <Type>Text</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>Text</Name>
          <Value>Txt:PageSize</Value>
          <Type>ResourceReference</Type>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>PreviousPage</Name>
      <Type>ImageButton</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>CausesValidation</Name>
          <Value>False</Value>
        </Attribute>
        <Attribute>
          <Name>CommandName</Name>
          <Value>PreviousPage</Value>
        </Attribute>
        <Attribute>
          <Name>ImageURL</Name>
          <Value>../Images/ButtonBarPrevious.gif</Value>
        </Attribute>
        <Attribute>
          <Name>onclientclick</Name>
          <Value>return SubmitHRefOnce(this, "");</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseout</Name>
          <Value>this.src='../Images/ButtonBarPrevious.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>onmouseover</Name>
          <Value>this.src='../Images/ButtonBarPreviousOver.gif'</Value>
        </Attribute>
        <Attribute>
          <Name>ToolTip</Name>
          <Value>Btn:PreviousPage</Value>
          <Type>ResourceReference</Type>
        </Attribute>
        <Attribute>
          <Name>Visible</Name>
          <Value>False</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
    <ContainedComponent>
      <Name>Summary</Name>
      <Type>TextBox</Type>
      <PassthroughAttributes>
        <Attribute>
          <Name>style</Name>
          <Value>visibility:hidden;display:none</Value>
        </Attribute>
        <Attribute>
          <Name>Text</Name>
          <Value>Infinite Pagination</Value>
        </Attribute>
      </PassthroughAttributes>
    </ContainedComponent>
  </ComposedOf>
  <LayoutDefinition>&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;LayoutDefinition xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;Layout Name="Pagination" Type="RootLayout"&gt;
    &lt;Prolog /&gt;
    &lt;Row&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:PANEL NAME="PageNumberPanel" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes&gt;
          &lt;Attribute&gt;
            &lt;Name&gt;class&lt;/Name&gt;
            &lt;AttributeValue&gt;prbggo&lt;/AttributeValue&gt;
          &lt;/Attribute&gt;
        &lt;/CellAttributes&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:LINKBUTTON NAME="PageSizeButton" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes&gt;
          &lt;Attribute&gt;
            &lt;Name&gt;class&lt;/Name&gt;
            &lt;AttributeValue&gt;prbggo&lt;/AttributeValue&gt;
          &lt;/Attribute&gt;
        &lt;/CellAttributes&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;%= SystemUtils.GenerateEnterKeyCaptureBeginTag(FindControl("_PageSizeButton")) %&amp;gt;&amp;lt;GEN:TextBox Name="PageSize" /&amp;gt;&amp;lt;%= SystemUtils.GenerateEnterKeyCaptureEndTag(FindControl("_PageSizeButton")) %&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes&gt;
          &lt;Attribute&gt;
            &lt;Name&gt;class&lt;/Name&gt;
            &lt;AttributeValue&gt;prbg&lt;/AttributeValue&gt;
          &lt;/Attribute&gt;
        &lt;/CellAttributes&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:TEXTBOX Name="Summary" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes&gt;
          &lt;Attribute&gt;
            &lt;Name&gt;class&lt;/Name&gt;
            &lt;AttributeValue&gt;prbg&lt;/AttributeValue&gt;
          &lt;/Attribute&gt;
        &lt;/CellAttributes&gt;
      &lt;/Cell&gt;
      &lt;RowAttributes /&gt;
    &lt;/Row&gt;
    &lt;Epilog&gt;
      &lt;Value&gt;&amp;lt;div&amp;gt;&amp;lt;iframe id="Infiniteframe" runat="server" style="width:0px;height:0px;visibility:hidden;position:fixed;top:500px;left:0px"&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;   
    var ScrollRegionName = "";
    var innerpage = ""
    var bool = "False";
    var NewRecords = "True";
    var RecordsRowCount = 0;
    var RowCount = 0;
    var index = 0;
    var done = "True"
    var id = "";
    var postbackSucess = "True";
    var OrgPageSize = 0;
    var OrgRowLenght = 0;
    var counter = 0;
    var rowfetch = 0;
    var check = 0;
    var i = 0;
    var j = 0;
    var CurrPageinfo = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;')
    if (OrgPageSize == 0) {
        OrgPageSize = parseInt(CurrPageinfo.value);
    }
    var currpagesize = OrgPageSize;
    var initialframe = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
    var parenttframe = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
    
    //Sets URL for the Iframe
    if ((document.forms[0].action.indexOf("InfiIframe") == -1)) {
        if (parenttframe != undefined) {
            if (parenttframe.src == "" &amp;amp;&amp;amp; parenttframe.name != "PostbackIframe") {
                popthechild()
            }
        } else {
            popthechild()
        }
    } 
    //Function is invoked when the page is scrolled down
    function pageLoad() {
        try {
            ScrollRegionName = ScrollRegName();
            if (window.frameElement == null &amp;amp;&amp;amp; ScrollRegionName == "scrollRegion") {
                innerpage = "False";
                $(window).scroll(function() {
                    if (($(window).scrollTop() + 10) &amp;gt;= $(document).height() - $(window).height()) {
                        if (bool == "True" &amp;amp;&amp;amp; done == "True" &amp;amp;&amp;amp; postbackSucess == "True") {
                            onScroll();
                        }
                    }
                });
            } else {
                innerpage = "True";
                $('#' + ScrollRegionName).scroll(function() {
                    if ($(this)[0].scrollHeight - $(this).outerHeight() &amp;lt;= ($(this).scrollTop() + 10)) {
                        if (bool == "True") {
                            onScroll();
                        }
                    }
                });
            }
        } catch (err) {
        }
    }
    
    //Invoked when all the DOM Elements are ready.
    $(document).ready(function() {
        try {
            if ((document.forms[0].action.indexOf("InfiIframe") != -1)) {
                var parenttframe = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
                if (parenttframe.name == "PostbackIframe" &amp;amp;&amp;amp; window.parent.done == "False" &amp;amp;&amp;amp; navigator.appName != 'Microsoft Internet Explorer') {
                    var IframePageSize = parenttframe.contentDocument.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                    IframePageSize.value = window.parent.currpagesize;
                    IframePageSize.onchange();
                    window.parent.done = "True";
                    window.parent.postbackSucess = "False";
                }
            }
        } catch (err) {
        }
    });

    //Event Is Invoked after Postback Completes
    var prm = Sys.WebForms.PageRequestManager.getInstance();
	prm.add_initializeRequest(InitializeRequestHandler);
    
    function InitializeRequestHandler(sender, args) {
        if (document.readyState != "complete") {
              var iframeName = "";
              if (window.frameElement != null) {
                    iframeName = window.frameElement.id;
              }
              if (iframeName.indexOf("Infiniteframe") == -1) {
                    args.set_cancel(true);
              }
        }
    }
    prm.add_endRequest(function(s, e) {
        try {
            var parenttframe = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
            if (document.forms[0].action.indexOf("InfiIframe") != -1) {
                if (parenttframe.src != "" || parenttframe.name == "PostbackIframe") {
                    var initialframe = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
                    window.parent.bool = "True";
                    var olddiv = window.parent.document.getElementById('loadgif');
                    olddiv.outerHTML = "";
                    delete olddiv.parentNode;
                    var t = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
                    var ParentTable = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                    var iFrameBody = t.contentDocument.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                    //Parent ViewState
                    var ParentVS = window.parent.document.getElementById('__VIEWSTATE');
                    var a = [];
                    //Iframe ViewState
                    var IframeVSCode = document.getElementById("__VIEWSTATE");
                    var check = 0;
                    j = 0;

                    if (iFrameBody != "null") {

                        //Number of rows in the iFrame Table
                        var rowLength = iFrameBody.rows.length;
                        var parentrowlength = ParentTable.rows.length;
                        for (i = 0; i &amp;lt; rowLength; i++) {
                            if (i &amp;gt;= rowfetch) {
                                a[j] = iFrameBody.rows.item(i).outerHTML;
                                j += 1;
                            }
                        }
                        for (i = (parentrowlength - 1); i &amp;gt;= (parentrowlength - window.parent.counter); i--) {
                            ParentTable.deleteRow(i);
                        }
                        if (rowLength == (rowfetch + counter)) { window.parent.NewRecords = "False"; }

                        if ((document.forms[0].action.indexOf("InfiIframe") == -1)) {
                            initialframe.contentWindow.rowfetch = rowLength - window.parent.counter;
                            rowfetch = rowLength - window.parent.counter;
                        }
                        if ((document.forms[0].action.indexOf("InfiIframe") != -1)) {
                            window.parent.rowfetch = rowLength - window.parent.counter;
                            rowfetch = rowLength - window.parent.counter;
                        }
                        for (var i = 0; i &amp;lt; a.length; i++) {

                            //Appends the new rows to the parent table
                            window.parent.$('#' + ParentTable.id + ' &amp;gt; tbody:last').append(a[i]);

                        }
                        //Replace the Parent ViewState with the Child Viewstate
                        if (a.length &amp;gt; 0) {
                            ParentVS.value = IframeVSCode.value;
                        }
                        ScrollBarCheck()
                    }
                    window.parent.submitcount = 0;
                }
            }
            else {
                bool = "True";
                NewRecords = "True";
                postback = "True";
                var parentid = "";
                var ParentTable = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                var parentrowlength = ParentTable.rows.length - counter;
                if (parentrowlength == OrgRowLenght) {
                    currpagesize = OrgPageSize;
                }
                var MyCurrForm = document.getElementById('aspnetForm');
                var initialframe = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
                var mystring = document.documentElement.outerHTML;
                var ind1 = mystring.indexOf("action=\"", mystring.indexOf("&amp;lt;form"));
                var ind2 = mystring.indexOf("\"", (ind1 + 8));
                var replace = mystring.substring(ind1, (ind2));
                if (MyCurrForm.action.indexOf("?") == -1) {
                    mystring = mystring.replace(replace, "action = \"" + MyCurrForm.action + "?InfiIframe");
                } else {
                    mystring = mystring.replace(replace, "action = \"" + MyCurrForm.action + "&amp;amp;InfiIframe")
                }
                var index1 = mystring.indexOf("&amp;lt;iframe id=\"" + '&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
                var index2 = mystring.indexOf("&amp;lt;/iframe&amp;gt;", index1);
                var outerstuff = mystring
                if (index1 != -1) {
                    outerstuff = mystring.substring(0, index1) + mystring.substring((index2 + 9), mystring.length);
                }
                var dstDoc = initialframe.contentWindow.document;
                dstDoc.open();
                dstDoc.write(outerstuff);
                dstDoc.close();
                initialframe.name = "PostbackIframe";
                done = "False";
                if (innerpage == "False") {
                    $(window).scrollTop(0);
                } else {
                    if (innerpage == "True") {
                        $('#' + ScrollRegionName).scrollTop(0);
                    }
                }
                submitcount = 0;
                if (navigator.appName == 'Microsoft Internet Explorer') {
                    var IframePageSize = initialframe.contentDocument.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                    IframePageSize.value = currpagesize;
                    IframePageSize.onchange();
                }
            }
        }
        catch (err) {
            if ((document.forms[0].action.indexOf("InfiIframe") != -1)) {
                if (parenttframe.name == "PostbackIframe" &amp;amp;&amp;amp; window.parent.done == "True" &amp;amp;&amp;amp; navigator.appName != 'Microsoft Internet Explorer') {
                    rowfetch = CalculateRowFetch();
                }
                if (window.parent.postbackSucess == "False") {
                    window.parent.postbackSucess = "True";
                    ScrollBarCheck()
                }
            }
        }
    });
    //Called When The Page Is Completely Loaded
    window.onload = function() {
        try {
            var initialframe = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
            var parenttframe = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
            var table = document.getElementsByTagName("table");
            rowfetch = CalculateRowFetch();
            if (OrgRowLenght == 0) {
                OrgRowLenght = rowfetch;
            }
            if ((document.forms[0].action.indexOf("InfiIframe") != -1)) {
                if (window.parent.done = "False") {
                    window.parent.done = "True";
                }
                ScrollBarCheck()
            }
        } catch (err) {
        }
    }
    //Called The Browser Doesnt Have A Scroll Bar Due to Few Records 
    function onScrollNoSbar() {
        if (rowfetch &amp;gt; 0) {
            try {
                var Form = document.forms['aspnetForm'];
                var Loc = Form.action;
                var z = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                var iFrameBod = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                var rowLengt = iFrameBod.rows.length;
                var PageSize = document.getElementsByClassName('panelPaginationC');
                var ParentPageSize = window.parent.document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                var IframePageSize = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                if (PageSize != null) {
                    if (window.parent.NewRecords == "True") {
                        window.parent.currpagesize = parseInt(IframePageSize.value) + parseInt(OrgPageSize);
                        IframePageSize.value = window.parent.currpagesize;
                        IframePageSize.onchange();
                        window.parent.$('#' + '&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;').after('&amp;lt;div id=\"loadgif\" align=\"center\"&amp;gt;&amp;lt;img id=\"loading-image\" src=\"../Images/ajax-loader.gif\"&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/div&amp;gt;');
                    }
                }
                window.parent.bool = "False";
            } catch (err) {
            }
        }
    }
    
    //Called When The Scroll Bar Reaches The Bottom
    function onScroll() {
        try {
            var t = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("Infiniteframe")) %&amp;gt;');
            if (t != null &amp;amp;&amp;amp; t.contentWindow.rowfetch &amp;gt; 0) {
                var Form = document.forms['aspnetForm'];
                var Loc = Form.action;
                var z = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                var iFrameBod = t.contentDocument.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
                var rowLengt = iFrameBod.rows.length;
                var PageSize = t.contentDocument.getElementsByClassName('panelPaginationC');
                var ParentPageSize = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                var IframePageSize = t.contentDocument.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSize")) %&amp;gt;');
                if (PageSize != null) {
                    if (NewRecords == "True") {
                        currpagesize = parseInt(IframePageSize.value) + parseInt(OrgPageSize);
                        IframePageSize.value = currpagesize;
                        IframePageSize.onchange();
                        $('#' + '&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;').after('&amp;lt;div id=\"loadgif\" align=\"center\"&amp;gt;&amp;lt;img id=\"loading-image\" src=\"../Images/ajax-loader.gif\"&amp;gt;&amp;lt;/img&amp;gt;&amp;lt;/div&amp;gt;');
                    }
                }
                bool = "False";
            }
        } catch (err) {
        }
    }
    function ScrollRegName() {
        try {
            var parent = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
            var stop = "False"
            var divid = parent.className;
            while (stop != "True") {
                if (divid != undefined) {
                    if (divid == "scrollRegion" || divid == "QSscrollRegion" || divid == "tableContainer") {
                        stop = "True";
                        return divid
                    } else {
                        parent = parent.parentNode;
                        if (parent != undefined) {
                            divid = parent.className;
                        } else {
                            return;
                        }
                    }
                } else {
                    return;
                }
            }
        } catch (err) {
        }
    }
    
    //Check if ScrollBar Exists. If not load records till scrollbar appears
    function ScrollBarCheck() {
        try {
            if (ScrollRegionName == "") {
                ScrollRegionName = window.parent.ScrollRegionName;
            }
            if ((window.parent.frameElement == null &amp;amp;&amp;amp; ScrollRegionName == "scrollRegion") || (window.parent.frameElement == null &amp;amp;&amp;amp; ScrollRegionName == "")) {
                if ($(window.parent).scrollTop() == 0) {
                    $(window.parent).scrollTop(10);
                }
                window.parent.bool = "True"
                var Height = document.body.scrollHeight;
                var Top = $(window.parent).scrollTop();
                var CHeight = document.body.scrollHeight;
                if (Height == (Top + CHeight)) {
                    if ($(window.parent).scrollTop() == 0) {
                        $(window.parent).scrollTop(10);
                    }
                    if (window.parent.postbackSucess == "True") {
                        onScrollNoSbar();
                    }
                }
            } else {
                if (window.parent.$('#' + ScrollRegionName).scrollTop() == 0) {
                    window.parent.$('#' + ScrollRegionName).scrollTop(1);
                }
                window.parent.bool = "True"
                var Height = window.parent.$('#' + ScrollRegionName)[0].scrollHeight;
                var Top = window.parent.$('#' + ScrollRegionName).scrollTop();
                var CHeight = window.parent.$('#' + ScrollRegionName)[0].scrollHeight;
                if (Height == (Top + CHeight)) {
                    if (window.parent.$('#' + ScrollRegionName).scrollTop() == 0) {
                        window.parent.$('#' + ScrollRegionName).scrollTop(1);
                    }
                    if (window.parent.postbackSucess == "True") {
                        onScrollNoSbar();
                    }
                }
            }
        } catch (err) {
        }
    }
    //Calculate Number of rows to fetch from the Iframe
    function CalculateRowFetch() {
        try {
            var iframtable = document.getElementById('&amp;lt;%= SystemUtils.InfinitePagination(FindControl("_PageSizeButton")) %&amp;gt;');
            var rowLength = iframtable.rows.length;
            rowfetch = iframtable.rows.length;
            counter = 0;
            for (i = (rowLength - 1); i &amp;gt;= 0; i--) {
                if (iframtable.rows[i].attributes.length != 0) {
                    if (iframtable.rows[i].attributes[0].value == "Footer") {
                        counter = counter + 1;
                    }
                }
                else {
                    break;
                }
            }
            rowfetch = rowfetch - counter;
            return rowfetch;
        } catch (err) {
        }
    }
    function popthechild() {
        try {
            var Form = document.forms['aspnetForm'];
            var Loc = Form.action;
            if (Loc.indexOf("?") == -1) {
                initialframe.src = "" + Loc + "?InfiIframe";
            }
            else {
                initialframe.src = "" + Loc + "&amp;amp;InfiIframe";
            }
        } catch (err) {
        }
    }
&amp;lt;/script&amp;gt;&lt;/Value&gt;
    &lt;/Epilog&gt;
    &lt;TableAttributes&gt;
      &lt;Attribute&gt;
        &lt;Name&gt;cellspacing&lt;/Name&gt;
        &lt;AttributeValue&gt;0&lt;/AttributeValue&gt;
      &lt;/Attribute&gt;
      &lt;Attribute&gt;
        &lt;Name&gt;cellpadding&lt;/Name&gt;
        &lt;AttributeValue&gt;0&lt;/AttributeValue&gt;
      &lt;/Attribute&gt;
      &lt;Attribute&gt;
        &lt;Name&gt;border&lt;/Name&gt;
        &lt;AttributeValue&gt;0&lt;/AttributeValue&gt;
      &lt;/Attribute&gt;
      &lt;Attribute&gt;
        &lt;Name&gt;style&lt;/Name&gt;
        &lt;AttributeValue&gt;visibility:hidden;display:none&lt;/AttributeValue&gt;
      &lt;/Attribute&gt;
    &lt;/TableAttributes&gt;
  &lt;/Layout&gt;
  &lt;Layout Name="PageNumberPanel" Type="BlankPanel"&gt;
    &lt;Prolog /&gt;
    &lt;Row&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:ImageButton Name="FirstPage" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes /&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:ImageButton Name="PreviousPage" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes /&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;%= SystemUtils.GenerateEnterKeyCaptureBeginTag(FindControl("_PageSizeButton")) %&amp;gt;&amp;lt;GEN:TextBox Name="CurrentPage" /&amp;gt;&amp;lt;%= SystemUtils.GenerateEnterKeyCaptureEndTag(FindControl("_PageSizeButton")) %&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes&gt;
          &lt;Attribute&gt;
            &lt;Name&gt;class&lt;/Name&gt;
            &lt;AttributeValue&gt;prbg&lt;/AttributeValue&gt;
          &lt;/Attribute&gt;
        &lt;/CellAttributes&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:ImageButton Name="NextPage" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes /&gt;
      &lt;/Cell&gt;
      &lt;Cell&gt;
        &lt;Value&gt;&amp;lt;GEN:ImageButton Name="LastPage" /&amp;gt;&lt;/Value&gt;
        &lt;CellAttributes /&gt;
      &lt;/Cell&gt;
      &lt;RowAttributes /&gt;
    &lt;/Row&gt;
    &lt;Epilog /&gt;
    &lt;TableAttributes /&gt;
  &lt;/Layout&gt;
&lt;/LayoutDefinition&gt;]]&gt;</LayoutDefinition>
</ComponentDefinition>